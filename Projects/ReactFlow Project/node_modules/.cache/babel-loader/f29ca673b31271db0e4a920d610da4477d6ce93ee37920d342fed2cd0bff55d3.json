{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// Initial nodes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 300,\n    y: 400\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}];\nfunction FlowChart() {\n  _s();\n  const [nodes, setNodes] = useNodesState(initialNodes);\n  const [edges, setEdges] = useEdgesState([]);\n  const [nodeId, setNodeId] = useState(3); // To track the new node's id\n\n  // Function to add a new node\n  const addNodeHandler = () => {\n    const newNode = {\n      id: `node-${nodeId}`,\n      position: {\n        x: 300,\n        y: 250\n      },\n      // Position between start and end node\n      data: {\n        label: `+`\n      },\n      style: {\n        background: '#ffffff',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000'\n      }\n    };\n    const newEdge = {\n      id: `e${nodeId - 1}-${nodeId}`,\n      source: 'start',\n      target: `node-${nodeId}`,\n      animated: true,\n      style: {\n        stroke: '#000'\n      }\n    };\n    setNodes(prevNodes => [...prevNodes, newNode]);\n    setEdges(prevEdges => [...prevEdges, newEdge]);\n    setNodeId(nodeId + 1); // Increment the node ID for next node\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNodeHandler,\n      style: {\n        position: 'absolute',\n        top: '300px',\n        left: '820px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: setNodes,\n      onEdgesChange: setEdges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowChart, \"SGG3VzOTDsY5xD2EU13rhCKxEzo=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = FlowChart;\nexport default FlowChart;\nvar _c;\n$RefreshReg$(_c, \"FlowChart\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","color","border","FlowChart","_s","nodes","setNodes","edges","setEdges","nodeId","setNodeId","addNodeHandler","newNode","newEdge","source","target","animated","stroke","prevNodes","prevEdges","height","children","onClick","top","left","backgroundColor","cursor","fileName","_jsxFileName","lineNumber","columnNumber","onNodesChange","onEdgesChange","fitView","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// Initial nodes\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n  {\n    id: 'end',\n    position: { x: 300, y: 400 },\n    data: { label: 'End Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n];\n\nfunction FlowChart() {\n  const [nodes, setNodes] = useNodesState(initialNodes);\n  const [edges, setEdges] = useEdgesState([]);\n  const [nodeId, setNodeId] = useState(3); // To track the new node's id\n\n  // Function to add a new node\n  const addNodeHandler = () => {\n    const newNode = {\n      id: `node-${nodeId}`,\n      position: { x: 300, y: 250 }, // Position between start and end node\n      data: { label: `+` },\n      style: {\n        background: '#ffffff',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000',\n      },\n    };\n\n    const newEdge = {\n      id: `e${nodeId - 1}-${nodeId}`,\n      source: 'start',\n      target: `node-${nodeId}`,\n      animated: true,\n      style: { stroke: '#000' },\n    };\n\n    setNodes((prevNodes) => [...prevNodes, newNode]);\n    setEdges((prevEdges) => [...prevEdges, newEdge]);\n\n    setNodeId(nodeId + 1); // Increment the node ID for next node\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      {/* Button to add a new node */}\n      <button\n        onClick={addNodeHandler}\n        style={{\n          position: 'absolute',\n          top: '300px',\n          left: '820px',\n          padding: '10px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n        }}\n      >\n        Add Node\n      </button>\n\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={setNodes}\n        onEdgesChange={setEdges}\n        fitView\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n\nexport default FlowChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}