{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 300,\n    y: 1000\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep'\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(1); // For unique node IDs\n\n  // Handler to add a new node\n  const addNodeHandler = () => {\n    const newNodeId = `node-${nodeCount}`;\n    const newNodePosition = {\n      x: 300,\n      y: 100 + nodeCount * 100\n    };\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: {\n        label: `Node ${nodeCount}`\n      },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000'\n      }\n    };\n\n    // Log new node position\n    console.log(`New Node Created: ${newNodeId}`);\n    console.log(`Position: x = ${newNodePosition.x}, y = ${newNodePosition.y}`);\n\n    // Add the new node\n    setNodes(nds => [...nds, newNode]);\n\n    // Create new edges\n    const newEdges = [\n    // Connect the start node to the new node\n    {\n      id: `e-start-${newNodeId}`,\n      source: 'start',\n      target: newNodeId,\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#1890ff',\n        strokeWidth: 2\n      }\n    },\n    // Connect the new node to the end node\n    {\n      id: `e-${newNodeId}-end`,\n      source: newNodeId,\n      target: 'end',\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#1890ff',\n        strokeWidth: 2\n      }\n    }];\n\n    // If there's already a previous node, connect the new node to it\n    if (nodeCount > 0) {\n      const prevNodeId = `node-${nodeCount - 1}`;\n      newEdges.push({\n        id: `e-${prevNodeId}-${newNodeId}`,\n        source: prevNodeId,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: {\n          stroke: '#1890ff',\n          strokeWidth: 2\n        }\n      });\n    }\n\n    // Update the edges state\n    setEdges(eds => [...eds, ...newEdges]);\n\n    // Calculate position for the \"+\" button in between the new node and the previous node\n    const lastNode = nodes[nodes.length - 2]; // Get the last node before the new one\n    const buttonPosition = {\n      x: (newNode.position.x + lastNode.position.x) / 2,\n      // Midpoint between last and new node X position\n      y: (newNode.position.y + lastNode.position.y) / 2 // Midpoint between last and new node Y position\n    };\n    const newButton = {\n      id: `add-node-button-${newNodeId}`,\n      position: buttonPosition,\n      data: {\n        label: '+'\n      },\n      style: {\n        background: '#007bff',\n        color: 'white',\n        padding: 10,\n        borderRadius: 10,\n        textAlign: 'center',\n        cursor: 'pointer'\n      }\n    };\n\n    // Add the \"+\" button to the nodes state\n    setNodes(nds => [...nds, newButton]);\n\n    // Increment node count\n    setNodeCount(nodeCount + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNodeHandler,\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '20px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ftZcKc2+1DyTjXBEiGg7Yt1pANM=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","color","border","initialEdges","source","target","type","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","addNodeHandler","newNodeId","newNodePosition","newNode","console","log","nds","newEdges","animated","stroke","strokeWidth","prevNodeId","push","eds","lastNode","length","buttonPosition","newButton","textAlign","cursor","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","variant","gap","size","onClick","top","left","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n  {\n    id: 'end',\n    position: { x: 300, y: 1000 },\n    data: { label: 'End Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n];\n\nconst initialEdges = [\n  { id: 'start->end', source: 'start', target: 'end', type: 'smoothstep' },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(1); // For unique node IDs\n\n  // Handler to add a new node\n  const addNodeHandler = () => {\n    const newNodeId = `node-${nodeCount}`;\n    const newNodePosition = { x: 300, y: 100 + nodeCount * 100 };\n\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: { label: `Node ${nodeCount}` },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000',\n      },\n    };\n\n    // Log new node position\n    console.log(`New Node Created: ${newNodeId}`);\n    console.log(`Position: x = ${newNodePosition.x}, y = ${newNodePosition.y}`);\n\n    // Add the new node\n    setNodes((nds) => [...nds, newNode]);\n\n    // Create new edges\n    const newEdges = [\n      // Connect the start node to the new node\n      {\n        id: `e-start-${newNodeId}`,\n        source: 'start',\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      },\n      // Connect the new node to the end node\n      {\n        id: `e-${newNodeId}-end`,\n        source: newNodeId,\n        target: 'end',\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      },\n    ];\n\n    // If there's already a previous node, connect the new node to it\n    if (nodeCount > 0) {\n      const prevNodeId = `node-${nodeCount - 1}`;\n      newEdges.push({\n        id: `e-${prevNodeId}-${newNodeId}`,\n        source: prevNodeId,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      });\n    }\n\n    // Update the edges state\n    setEdges((eds) => [...eds, ...newEdges]);\n\n    // Calculate position for the \"+\" button in between the new node and the previous node\n    const lastNode = nodes[nodes.length - 2]; // Get the last node before the new one\n    const buttonPosition = {\n      x: (newNode.position.x + lastNode.position.x) / 2, // Midpoint between last and new node X position\n      y: (newNode.position.y + lastNode.position.y) / 2, // Midpoint between last and new node Y position\n    };\n\n    const newButton = {\n      id: `add-node-button-${newNodeId}`,\n      position: buttonPosition,\n      data: { label: '+' },\n      style: {\n        background: '#007bff',\n        color: 'white',\n        padding: 10,\n        borderRadius: 10,\n        textAlign: 'center',\n        cursor: 'pointer',\n      },\n    };\n\n    // Add the \"+\" button to the nodes state\n    setNodes((nds) => [...nds, newButton]);\n\n    // Increment node count\n    setNodeCount(nodeCount + 1);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n\n      {/* Add Node Button */}\n      <button\n        onClick={addNodeHandler}\n        style={{\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          padding: '10px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n        }}\n      >\n        Add Node\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}