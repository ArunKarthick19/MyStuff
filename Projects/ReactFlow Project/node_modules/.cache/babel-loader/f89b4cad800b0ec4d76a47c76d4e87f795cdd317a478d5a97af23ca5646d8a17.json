{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 300,\n    y: 400\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep'\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(0); // To generate unique node IDs\n\n  // Function to handle adding a new Action Node at the clicked position\n  const addNodeHandler = positionIndex => {\n    const newNodeId = `action-node-${nodeCount}`;\n    const newNodePosition = {\n      x: 300,\n      y: 200 + nodeCount * 100\n    }; // Dynamic Y position\n\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: {\n        label: `Action Node ${nodeCount + 1}`\n      },\n      style: {\n        background: '#a0d911',\n        // Green background for Action Node\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000'\n      }\n    };\n\n    // New \"+ Button\" to be placed after the new action node\n    const newAddNodeButton = {\n      id: 'add-node-button',\n      position: {\n        x: 300,\n        y: newNodePosition.y + 100\n      },\n      data: {\n        label: '+'\n      },\n      style: {\n        background: '#007bff',\n        color: 'white',\n        padding: 10,\n        borderRadius: 10,\n        textAlign: 'center',\n        cursor: 'pointer'\n      }\n    };\n\n    // Add the new node and update the \"Add Node Button\"\n    setNodes(nds => {\n      const updatedNodes = [...nds];\n      updatedNodes.splice(positionIndex + 1, 0, newNode); // Add the new node at the correct position\n      updatedNodes.splice(positionIndex + 2, 0, newAddNodeButton); // Add \"+\" button after new node\n      return updatedNodes;\n    });\n\n    // Update edges: Connect the new action node and adjust the flow\n    setEdges(eds => {\n      var _nodes$positionIndex, _nodes$positionIndex2;\n      const updatedEdges = eds.filter(edge => edge.source !== 'add-node-button' && edge.target !== 'end');\n      return [...updatedEdges, {\n        id: `e-${((_nodes$positionIndex = nodes[positionIndex]) === null || _nodes$positionIndex === void 0 ? void 0 : _nodes$positionIndex.id) || 'start'}-${newNodeId}`,\n        source: ((_nodes$positionIndex2 = nodes[positionIndex]) === null || _nodes$positionIndex2 === void 0 ? void 0 : _nodes$positionIndex2.id) || 'start',\n        // Connect to the previous node\n        target: newNodeId,\n        type: 'smoothstep'\n      }, {\n        id: `e-${newNodeId}-add-node-button`,\n        source: newNodeId,\n        target: 'add-node-button',\n        type: 'smoothstep'\n      }, {\n        id: `e-add-node-button-end`,\n        source: 'add-node-button',\n        target: 'end',\n        type: 'smoothstep'\n      }];\n    });\n\n    // Increment node count for unique node ID\n    setNodeCount(nodeCount + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addNodeHandler(nodes.length - 1),\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '20px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kIUz7iCQDU55HPBTm0J7nDzKnp0=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","color","border","initialEdges","source","target","type","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","addNodeHandler","positionIndex","newNodeId","newNodePosition","newNode","newAddNodeButton","textAlign","cursor","nds","updatedNodes","splice","eds","_nodes$positionIndex","_nodes$positionIndex2","updatedEdges","filter","edge","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","variant","gap","size","onClick","length","top","left","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\n\nimport 'reactflow/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n  {\n    id: 'end',\n    position: { x: 300, y: 400 },\n    data: { label: 'End Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n];\n\nconst initialEdges = [\n  { id: 'start->end', source: 'start', target: 'end', type: 'smoothstep' },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(0); // To generate unique node IDs\n\n  // Function to handle adding a new Action Node at the clicked position\n  const addNodeHandler = (positionIndex) => {\n    const newNodeId = `action-node-${nodeCount}`;\n    const newNodePosition = { x: 300, y: 200 + nodeCount * 100 }; // Dynamic Y position\n\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: { label: `Action Node ${nodeCount + 1}` },\n      style: {\n        background: '#a0d911', // Green background for Action Node\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000',\n      },\n    };\n\n    // New \"+ Button\" to be placed after the new action node\n    const newAddNodeButton = {\n      id: 'add-node-button',\n      position: { x: 300, y: newNodePosition.y + 100 },\n      data: { label: '+' },\n      style: {\n        background: '#007bff',\n        color: 'white',\n        padding: 10,\n        borderRadius: 10,\n        textAlign: 'center',\n        cursor: 'pointer',\n      },\n    };\n\n    // Add the new node and update the \"Add Node Button\"\n    setNodes((nds) => {\n      const updatedNodes = [...nds];\n      updatedNodes.splice(positionIndex + 1, 0, newNode); // Add the new node at the correct position\n      updatedNodes.splice(positionIndex + 2, 0, newAddNodeButton); // Add \"+\" button after new node\n      return updatedNodes;\n    });\n\n    // Update edges: Connect the new action node and adjust the flow\n    setEdges((eds) => {\n      const updatedEdges = eds.filter(\n        (edge) => edge.source !== 'add-node-button' && edge.target !== 'end'\n      );\n      return [\n        ...updatedEdges,\n        {\n          id: `e-${nodes[positionIndex]?.id || 'start'}-${newNodeId}`,\n          source: nodes[positionIndex]?.id || 'start', // Connect to the previous node\n          target: newNodeId,\n          type: 'smoothstep',\n        },\n        {\n          id: `e-${newNodeId}-add-node-button`,\n          source: newNodeId,\n          target: 'add-node-button',\n          type: 'smoothstep',\n        },\n        {\n          id: `e-add-node-button-end`,\n          source: 'add-node-button',\n          target: 'end',\n          type: 'smoothstep',\n        },\n      ];\n    });\n\n    // Increment node count for unique node ID\n    setNodeCount(nodeCount + 1);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n\n      {/* Add Node Button */}\n      <button\n        onClick={() => addNodeHandler(nodes.length - 1)}\n        style={{\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          padding: '10px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n        }}\n      >\n        Add Node\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}