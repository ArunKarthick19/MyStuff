{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, Background, MarkerType, Handle, Position } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './App.css';\n\n// Custom Node Components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StartNode = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"start-node node\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-icon\",\n        children: \"\\uD83D\\uDCCC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"start-out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = StartNode;\nconst EndNode = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"end-node node\",\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"end-in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"END\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_c2 = EndNode;\nconst ActionNode = ({\n  data,\n  id\n}) => {\n  const handleNameChange = evt => {\n    data.onChange(id, evt.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"action-node node\",\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-icon\",\n        children: \"\\uD83D\\uDD27\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: data.name,\n        onChange: handleNameChange,\n        className: \"node-input\",\n        placeholder: \"Action Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: () => data.onDelete(id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c3 = ActionNode;\nconst IfElseNode = ({\n  data,\n  id\n}) => {\n  _s();\n  const [showForm, setShowForm] = useState(false);\n  const [newBranchName, setNewBranchName] = useState('');\n  const toggleForm = () => {\n    setShowForm(!showForm);\n    setNewBranchName('');\n  };\n  const handleNameChange = evt => {\n    data.onChange(id, evt.target.value);\n  };\n  const handleAddBranch = () => {\n    if (newBranchName.trim()) {\n      data.onAddBranch(id, newBranchName);\n      setNewBranchName('');\n    }\n  };\n  const handleBranchNameChange = (branchId, newName) => {\n    data.onChangeBranchName(id, branchId, newName);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleAddBranch();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"if-else-node node\",\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-icon\",\n          children: \"\\uD83D\\uDD00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: data.name,\n          onChange: handleNameChange,\n          className: \"node-input\",\n          placeholder: \"If/Else Condition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"edit-button\",\n          onClick: toggleForm,\n          children: showForm ? 'Close' : 'Edit Branches'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-button\",\n          onClick: () => data.onDelete(id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"branch-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Branches:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), data.branches.map(branch => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"branch-item\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: branch.name,\n              onChange: e => handleBranchNameChange(branch.id, e.target.value),\n              placeholder: \"Branch Name\",\n              className: \"branch-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this)\n          }, branch.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-branch\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: newBranchName,\n              onChange: e => setNewBranchName(e.target.value),\n              onKeyPress: handleKeyPress,\n              placeholder: \"New Branch Name\",\n              className: \"branch-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleAddBranch,\n              className: \"add-branch-button\",\n              children: \"Add Branch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"if-source\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(IfElseNode, \"6EbiQ1gTP7eXO2xV2lEAutsOzCk=\");\n_c4 = IfElseNode;\nconst BranchNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"branch-node node\",\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-label\",\n        children: data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_c5 = BranchNode;\nconst ElseNode = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"else-node node\",\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-label\",\n        children: \"Else\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_c6 = ElseNode;\nconst NodeSelection = ({\n  position,\n  onSelect,\n  onClose\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-selection-menu\",\n    style: {\n      position: 'absolute',\n      left: position.x,\n      top: position.y\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-title\",\n      children: \"Add Node:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"menu-item\",\n      onClick: () => onSelect('action'),\n      children: \"Action Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"menu-item\",\n      onClick: () => onSelect('ifElse'),\n      children: \"If/Else Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"menu-close\",\n      onClick: onClose,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_c7 = NodeSelection;\nconst AddButton = ({\n  onClick,\n  edgeId\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-button-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-button\",\n      onClick: e => onClick(e, edgeId),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n\n// Define custom node types\n_c8 = AddButton;\nconst nodeTypes = {\n  start: StartNode,\n  end: EndNode,\n  action: ActionNode,\n  ifElse: IfElseNode,\n  branch: BranchNode,\n  else: ElseNode\n};\n\n// Initial workflow with Start and End nodes\nconst initialNodes = [{\n  id: 'start',\n  type: 'start',\n  position: {\n    x: 250,\n    y: 5\n  },\n  data: {},\n  draggable: false\n}, {\n  id: 'end',\n  type: 'end',\n  position: {\n    x: 250,\n    y: 200\n  },\n  data: {},\n  draggable: false\n}];\n\n// Initial connection between Start and End nodes\nconst initialEdges = [{\n  id: 'start-end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep',\n  markerEnd: {\n    type: MarkerType.ArrowClosed\n  }\n}];\n\n// Custom edge with Add button\nconst ButtonEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  onClick\n}) => {\n  const edgePath = `M${sourceX},${sourceY} C${sourceX},${(sourceY + targetY) / 2} ${targetX},${(sourceY + targetY) / 2} ${targetX},${targetY}`;\n  const middleX = (sourceX + targetX) / 2;\n  const middleY = (sourceY + targetY) / 2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      id: id,\n      className: \"react-flow__edge-path\",\n      d: edgePath,\n      markerEnd: \"url(#arrowclosed)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n      width: 40,\n      height: 40,\n      x: middleX - 20,\n      y: middleY - 20,\n      className: \"edgebutton-foreignobject\",\n      children: /*#__PURE__*/_jsxDEV(AddButton, {\n        onClick: e => onClick(e, id),\n        edgeId: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c9 = ButtonEdge;\nconst edgeTypes = {\n  buttonedge: ButtonEdge\n};\nfunction App() {\n  _s2();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [showNodeMenu, setShowNodeMenu] = useState(false);\n  const [menuPosition, setMenuPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const nodeIdCounter = useRef(1);\n  const branchIdCounter = useRef(1);\n  const generateNodeId = prefix => `${prefix}-${nodeIdCounter.current++}`;\n  const generateBranchId = () => `branch-${branchIdCounter.current++}`;\n\n  // Handle connecting nodes\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge({\n      ...params,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    }, eds));\n  }, [setEdges]);\n\n  // Handle edge click to show Add button\n  const handleAddButtonClick = useCallback((event, edgeId) => {\n    event.stopPropagation();\n    setSelectedEdgeId(edgeId);\n    setShowNodeMenu(true);\n    setMenuPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }, []);\n\n  // Handle background click to hide node menu\n  const onPaneClick = useCallback(() => {\n    setShowNodeMenu(false);\n    setSelectedEdgeId(null);\n  }, []);\n\n  // Calculate position for the new node\n  const calculateNewNodePosition = useCallback(edgeId => {\n    const edge = edges.find(e => e.id === edgeId);\n    if (!edge) return {\n      x: 0,\n      y: 0\n    };\n\n    // Find source and target nodes\n    const sourceNode = nodes.find(n => n.id === edge.source);\n    const targetNode = nodes.find(n => n.id === edge.target);\n\n    // Calculate middle position\n    const x = (sourceNode.position.x + targetNode.position.x) / 2;\n    const y = (sourceNode.position.y + targetNode.position.y) / 2;\n    return {\n      x,\n      y\n    };\n  }, [edges, nodes]);\n\n  // Add Action Node\n  const addActionNode = useCallback(() => {\n    if (!selectedEdgeId) return;\n    const edge = edges.find(e => e.id === selectedEdgeId);\n    if (!edge) return;\n    const pos = calculateNewNodePosition(selectedEdgeId);\n    const newNodeId = generateNodeId('action');\n\n    // Create new action node\n    const newNode = {\n      id: newNodeId,\n      type: 'action',\n      position: pos,\n      data: {\n        name: 'New Action',\n        onChange: handleChangeNodeName,\n        onDelete: handleDeleteNode\n      }\n    };\n\n    // Create new edges\n    const newEdge1 = {\n      id: `${edge.source}-${newNodeId}`,\n      source: edge.source,\n      target: newNodeId,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    };\n    const newEdge2 = {\n      id: `${newNodeId}-${edge.target}`,\n      source: newNodeId,\n      target: edge.target,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    };\n\n    // Update nodes and edges\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => {\n      const filteredEdges = eds.filter(e => e.id !== selectedEdgeId);\n      return [...filteredEdges, newEdge1, newEdge2];\n    });\n    setShowNodeMenu(false);\n    setSelectedEdgeId(null);\n  }, [selectedEdgeId, edges, calculateNewNodePosition, setNodes, setEdges, handleAddButtonClick]);\n\n  // Add If/Else Node\n  const addIfElseNode = useCallback(() => {\n    if (!selectedEdgeId) return;\n    const edge = edges.find(e => e.id === selectedEdgeId);\n    if (!edge) return;\n    const pos = calculateNewNodePosition(selectedEdgeId);\n    const ifElseId = generateNodeId('ifElse');\n    const branchId = generateBranchId();\n    const branchNodeId = generateNodeId('branch');\n    const elseNodeId = generateNodeId('else');\n\n    // Create If/Else node\n    const ifElseNode = {\n      id: ifElseId,\n      type: 'ifElse',\n      position: pos,\n      data: {\n        name: 'Condition',\n        branches: [{\n          id: branchId,\n          name: 'True'\n        }],\n        onChange: handleChangeNodeName,\n        onDelete: handleDeleteIfElseNode,\n        onAddBranch: handleAddBranch,\n        onChangeBranchName: handleChangeBranchName\n      }\n    };\n\n    // Create branch node\n    const branchNode = {\n      id: branchNodeId,\n      type: 'branch',\n      position: {\n        x: pos.x - 100,\n        y: pos.y + 100\n      },\n      data: {\n        name: 'True'\n      },\n      parentNode: ifElseId\n    };\n\n    // Create else node\n    const elseNode = {\n      id: elseNodeId,\n      type: 'else',\n      position: {\n        x: pos.x + 100,\n        y: pos.y + 100\n      },\n      data: {},\n      parentNode: ifElseId\n    };\n\n    // Create new edges\n    const newEdge1 = {\n      id: `${edge.source}-${ifElseId}`,\n      source: edge.source,\n      target: ifElseId,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    };\n    const newEdge2 = {\n      id: `${branchNodeId}-${edge.target}`,\n      source: branchNodeId,\n      target: edge.target,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    };\n    const newEdge3 = {\n      id: `${elseNodeId}-${edge.target}`,\n      source: elseNodeId,\n      target: edge.target,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    };\n\n    // Update nodes and edges\n    setNodes(nds => [...nds, ifElseNode, branchNode, elseNode]);\n    setEdges(eds => {\n      const filteredEdges = eds.filter(e => e.id !== selectedEdgeId);\n      return [...filteredEdges, newEdge1, newEdge2, newEdge3];\n    });\n    setShowNodeMenu(false);\n    setSelectedEdgeId(null);\n  }, [selectedEdgeId, edges, calculateNewNodePosition, setNodes, setEdges, handleAddButtonClick]);\n\n  // Change node name\n  const handleChangeNodeName = useCallback((nodeId, newName) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            name: newName\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n\n  // Delete Action node\n  const handleDeleteNode = useCallback(nodeId => {\n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(e => e.target === nodeId);\n    const outgoingEdges = edges.filter(e => e.source === nodeId);\n\n    // Create new connections between the nodes that were connected to this node\n    const newConnections = [];\n    for (const incoming of incomingEdges) {\n      for (const outgoing of outgoingEdges) {\n        newConnections.push({\n          id: `${incoming.source}-${outgoing.target}`,\n          source: incoming.source,\n          target: outgoing.target,\n          type: 'buttonedge',\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          data: {\n            onClick: handleAddButtonClick\n          }\n        });\n      }\n    }\n\n    // Remove the node and its connected edges\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    setEdges(eds => {\n      const filteredEdges = eds.filter(e => e.source !== nodeId && e.target !== nodeId);\n      return [...filteredEdges, ...newConnections];\n    });\n  }, [edges, setNodes, setEdges, handleAddButtonClick]);\n\n  // Delete If/Else node\n  const handleDeleteIfElseNode = useCallback(nodeId => {\n    // Find all child nodes\n    const childNodes = nodes.filter(node => node.parentNode === nodeId);\n    const childNodeIds = childNodes.map(node => node.id);\n\n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(e => e.target === nodeId);\n    const outgoingEdges = edges.filter(e => childNodeIds.includes(e.source) && !childNodeIds.includes(e.target));\n\n    // Create new connections\n    const newConnections = [];\n    for (const incoming of incomingEdges) {\n      for (const outgoing of outgoingEdges) {\n        newConnections.push({\n          id: `${incoming.source}-${outgoing.target}`,\n          source: incoming.source,\n          target: outgoing.target,\n          type: 'buttonedge',\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          data: {\n            onClick: handleAddButtonClick\n          }\n        });\n      }\n    }\n\n    // Remove the If/Else node, its children, and connected edges\n    setNodes(nds => nds.filter(node => node.id !== nodeId && node.parentNode !== nodeId));\n    setEdges(eds => {\n      const filteredEdges = eds.filter(e => e.source !== nodeId && e.target !== nodeId && !childNodeIds.includes(e.source) && !childNodeIds.includes(e.target));\n      return [...filteredEdges, ...newConnections];\n    });\n  }, [nodes, edges, setNodes, setEdges, handleAddButtonClick]);\n\n  // Add branch to If/Else node\n  const handleAddBranch = useCallback((nodeId, branchName) => {\n    var _outgoingEdges$;\n    const ifElseNode = nodes.find(node => node.id === nodeId);\n    if (!ifElseNode) return;\n    const branchId = generateBranchId();\n    const branchNodeId = generateNodeId('branch');\n\n    // Update If/Else node with new branch\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        const updatedBranches = [...node.data.branches, {\n          id: branchId,\n          name: branchName\n        }];\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            branches: updatedBranches\n          }\n        };\n      }\n      return node;\n    }));\n\n    // Calculate position for new branch node\n    const existingBranchNodes = nodes.filter(n => n.parentNode === nodeId && n.type === 'branch');\n    const branchCount = existingBranchNodes.length;\n\n    // Create new branch node\n    const newBranchNode = {\n      id: branchNodeId,\n      type: 'branch',\n      position: {\n        x: ifElseNode.position.x - 100 + branchCount * 100,\n        y: ifElseNode.position.y + 100\n      },\n      data: {\n        name: branchName\n      },\n      parentNode: nodeId\n    };\n\n    // Find target node for new connection\n    const elseNode = nodes.find(n => n.parentNode === nodeId && n.type === 'else');\n    const outgoingEdges = edges.filter(e => e.source === elseNode.id);\n    const targetNodeId = (_outgoingEdges$ = outgoingEdges[0]) === null || _outgoingEdges$ === void 0 ? void 0 : _outgoingEdges$.target;\n\n    // Create new edge\n    const newEdge = {\n      id: `${branchNodeId}-${targetNodeId}`,\n      source: branchNodeId,\n      target: targetNodeId,\n      type: 'buttonedge',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      data: {\n        onClick: handleAddButtonClick\n      }\n    };\n\n    // Update nodes and edges\n    setNodes(nds => [...nds, newBranchNode]);\n    setEdges(eds => [...eds, newEdge]);\n  }, [nodes, edges, setNodes, setEdges, handleAddButtonClick]);\n\n  // Change branch name\n  const handleChangeBranchName = useCallback((nodeId, branchId, newName) => {\n    var _nodes$find;\n    // Update the branch name in the If/Else node data\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        const updatedBranches = node.data.branches.map(branch => branch.id === branchId ? {\n          ...branch,\n          name: newName\n        } : branch);\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            branches: updatedBranches\n          }\n        };\n      }\n      return node;\n    }));\n\n    // Update the branch node label\n    const branchIndex = (_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.branches.findIndex(b => b.id === branchId);\n    if (branchIndex === undefined) return;\n    const branchNodes = nodes.filter(n => n.parentNode === nodeId && n.type === 'branch');\n    if (branchNodes[branchIndex]) {\n      setNodes(nds => nds.map(node => {\n        if (node.id === branchNodes[branchIndex].id) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              name: newName\n            }\n          };\n        }\n        return node;\n      }));\n    }\n  }, [nodes, setNodes]);\n\n  // Define custom components for ReactFlow\n  const edgeOptions = {\n    type: 'buttonedge',\n    markerEnd: {\n      type: MarkerType.ArrowClosed\n    },\n    data: {\n      onClick: handleAddButtonClick\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Flow Workflow Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flow-container\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onPaneClick: onPaneClick,\n          nodeTypes: nodeTypes,\n          edgeTypes: edgeTypes,\n          defaultEdgeOptions: edgeOptions,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Background, {\n            color: \"#aaa\",\n            gap: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 13\n          }, this), showNodeMenu && /*#__PURE__*/_jsxDEV(NodeSelection, {\n            position: menuPosition,\n            onSelect: type => {\n              if (type === 'action') {\n                addActionNode();\n              } else if (type === 'ifElse') {\n                addIfElseNode();\n              }\n            },\n            onClose: () => {\n              setShowNodeMenu(false);\n              setSelectedEdgeId(null);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 723,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"VpVNmHV4la/GXbJQIX3ZNjq5zsw=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c10 = App;\nexport default function AppWithProvider() {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 767,\n    columnNumber: 5\n  }, this);\n}\n_c11 = AppWithProvider;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"StartNode\");\n$RefreshReg$(_c2, \"EndNode\");\n$RefreshReg$(_c3, \"ActionNode\");\n$RefreshReg$(_c4, \"IfElseNode\");\n$RefreshReg$(_c5, \"BranchNode\");\n$RefreshReg$(_c6, \"ElseNode\");\n$RefreshReg$(_c7, \"NodeSelection\");\n$RefreshReg$(_c8, \"AddButton\");\n$RefreshReg$(_c9, \"ButtonEdge\");\n$RefreshReg$(_c10, \"App\");\n$RefreshReg$(_c11, \"AppWithProvider\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Background","MarkerType","Handle","Position","jsxDEV","_jsxDEV","Fragment","_Fragment","StartNode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","position","Bottom","id","_c","EndNode","Top","_c2","ActionNode","data","handleNameChange","evt","onChange","target","value","name","placeholder","onClick","onDelete","_c3","IfElseNode","_s","showForm","setShowForm","newBranchName","setNewBranchName","toggleForm","handleAddBranch","trim","onAddBranch","handleBranchNameChange","branchId","newName","onChangeBranchName","handleKeyPress","e","key","branches","map","branch","onKeyPress","_c4","BranchNode","_c5","ElseNode","_c6","NodeSelection","onSelect","onClose","style","left","x","top","y","_c7","AddButton","edgeId","_c8","nodeTypes","start","end","action","ifElse","else","initialNodes","draggable","initialEdges","source","markerEnd","ArrowClosed","ButtonEdge","sourceX","sourceY","targetX","targetY","edgePath","middleX","middleY","d","width","height","_c9","edgeTypes","buttonedge","App","_s2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","showNodeMenu","setShowNodeMenu","menuPosition","setMenuPosition","selectedEdgeId","setSelectedEdgeId","nodeIdCounter","branchIdCounter","generateNodeId","prefix","current","generateBranchId","onConnect","params","eds","handleAddButtonClick","event","stopPropagation","clientX","clientY","onPaneClick","calculateNewNodePosition","edge","find","sourceNode","n","targetNode","addActionNode","pos","newNodeId","newNode","handleChangeNodeName","handleDeleteNode","newEdge1","newEdge2","nds","filteredEdges","filter","addIfElseNode","ifElseId","branchNodeId","elseNodeId","ifElseNode","handleDeleteIfElseNode","handleChangeBranchName","branchNode","parentNode","elseNode","newEdge3","nodeId","node","incomingEdges","outgoingEdges","newConnections","incoming","outgoing","push","childNodes","childNodeIds","includes","branchName","_outgoingEdges$","updatedBranches","existingBranchNodes","branchCount","length","newBranchNode","targetNodeId","newEdge","_nodes$find","branchIndex","findIndex","b","undefined","branchNodes","edgeOptions","defaultEdgeOptions","fitView","color","gap","_c10","AppWithProvider","_c11","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n  MarkerType,\n  Handle,\n  Position,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './App.css';\n\n// Custom Node Components\nconst StartNode = () => {\n  return (\n    <div className=\"start-node node\">\n      <div className=\"node-content\">\n        <div className=\"node-icon\">📌</div>\n        <div>Start</div>\n      </div>\n      <Handle type=\"source\" position={Position.Bottom} id=\"start-out\" />\n    </div>\n  );\n};\n\nconst EndNode = () => {\n  return (\n    <div className=\"end-node node\">\n      <Handle type=\"target\" position={Position.Top} id=\"end-in\" />\n      <div className=\"node-content\">\n        <div>END</div>\n      </div>\n    </div>\n  );\n};\n\nconst ActionNode = ({ data, id }) => {\n  const handleNameChange = (evt) => {\n    data.onChange(id, evt.target.value);\n  };\n\n  return (\n    <div className=\"action-node node\">\n      <Handle type=\"target\" position={Position.Top} />\n      <div className=\"node-content\">\n        <div className=\"node-icon\">🔧</div>\n        <input\n          type=\"text\"\n          value={data.name}\n          onChange={handleNameChange}\n          className=\"node-input\"\n          placeholder=\"Action Name\"\n        />\n        <button className=\"delete-button\" onClick={() => data.onDelete(id)}>\n          Delete\n        </button>\n      </div>\n      <Handle type=\"source\" position={Position.Bottom} />\n    </div>\n  );\n};\n\nconst IfElseNode = ({ data, id }) => {\n  const [showForm, setShowForm] = useState(false);\n  const [newBranchName, setNewBranchName] = useState('');\n\n  const toggleForm = () => {\n    setShowForm(!showForm);\n    setNewBranchName('');\n  };\n\n  const handleNameChange = (evt) => {\n    data.onChange(id, evt.target.value);\n  };\n\n  const handleAddBranch = () => {\n    if (newBranchName.trim()) {\n      data.onAddBranch(id, newBranchName);\n      setNewBranchName('');\n    }\n  };\n\n  const handleBranchNameChange = (branchId, newName) => {\n    data.onChangeBranchName(id, branchId, newName);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleAddBranch();\n    }\n  };\n\n  return (\n    <div className=\"if-else-node node\">\n      <Handle type=\"target\" position={Position.Top} />\n      <div className=\"node-content\">\n        <div className=\"node-header\">\n          <div className=\"node-icon\">🔀</div>\n          <input\n            type=\"text\"\n            value={data.name}\n            onChange={handleNameChange}\n            className=\"node-input\"\n            placeholder=\"If/Else Condition\"\n          />\n        </div>\n        \n        <div className=\"node-actions\">\n          <button className=\"edit-button\" onClick={toggleForm}>\n            {showForm ? 'Close' : 'Edit Branches'}\n          </button>\n          <button className=\"delete-button\" onClick={() => data.onDelete(id)}>\n            Delete\n          </button>\n        </div>\n        \n        {showForm && (\n          <div className=\"branch-form\">\n            <div className=\"branch-list\">\n              <h4>Branches:</h4>\n              {data.branches.map((branch) => (\n                <div key={branch.id} className=\"branch-item\">\n                  <input\n                    type=\"text\"\n                    value={branch.name}\n                    onChange={(e) => handleBranchNameChange(branch.id, e.target.value)}\n                    placeholder=\"Branch Name\"\n                    className=\"branch-input\"\n                  />\n                </div>\n              ))}\n              <div className=\"add-branch\">\n                <input\n                  type=\"text\"\n                  value={newBranchName}\n                  onChange={(e) => setNewBranchName(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"New Branch Name\"\n                  className=\"branch-input\"\n                />\n                <button onClick={handleAddBranch} className=\"add-branch-button\">Add Branch</button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <Handle type=\"source\" position={Position.Bottom} id=\"if-source\" />\n    </div>\n  );\n};\n\nconst BranchNode = ({ data }) => {\n  return (\n    <div className=\"branch-node node\">\n      <Handle type=\"target\" position={Position.Top} />\n      <div className=\"node-content\">\n        <div className=\"branch-label\">{data.name}</div>\n      </div>\n      <Handle type=\"source\" position={Position.Bottom} />\n    </div>\n  );\n};\n\nconst ElseNode = () => {\n  return (\n    <div className=\"else-node node\">\n      <Handle type=\"target\" position={Position.Top} />\n      <div className=\"node-content\">\n        <div className=\"branch-label\">Else</div>\n      </div>\n      <Handle type=\"source\" position={Position.Bottom} />\n    </div>\n  );\n};\n\nconst NodeSelection = ({ position, onSelect, onClose }) => {\n  return (\n    <div \n      className=\"node-selection-menu\" \n      style={{ \n        position: 'absolute', \n        left: position.x, \n        top: position.y \n      }}\n    >\n      <div className=\"menu-title\">Add Node:</div>\n      <button className=\"menu-item\" onClick={() => onSelect('action')}>\n        Action Node\n      </button>\n      <button className=\"menu-item\" onClick={() => onSelect('ifElse')}>\n        If/Else Node\n      </button>\n      <button className=\"menu-close\" onClick={onClose}>\n        Cancel\n      </button>\n    </div>\n  );\n};\n\nconst AddButton = ({ onClick, edgeId }) => {\n  return (\n    <div className=\"add-button-container\">\n      <button className=\"add-button\" onClick={(e) => onClick(e, edgeId)}>\n        +\n      </button>\n    </div>\n  );\n};\n\n// Define custom node types\nconst nodeTypes = {\n  start: StartNode,\n  end: EndNode,\n  action: ActionNode,\n  ifElse: IfElseNode,\n  branch: BranchNode,\n  else: ElseNode,\n};\n\n// Initial workflow with Start and End nodes\nconst initialNodes = [\n  {\n    id: 'start',\n    type: 'start',\n    position: { x: 250, y: 5 },\n    data: {},\n    draggable: false,\n  },\n  {\n    id: 'end',\n    type: 'end',\n    position: { x: 250, y: 200 },\n    data: {},\n    draggable: false,\n  },\n];\n\n// Initial connection between Start and End nodes\nconst initialEdges = [\n  {\n    id: 'start-end',\n    source: 'start',\n    target: 'end',\n    type: 'smoothstep',\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n    },\n  },\n];\n\n// Custom edge with Add button\nconst ButtonEdge = ({ id, sourceX, sourceY, targetX, targetY, onClick }) => {\n  const edgePath = `M${sourceX},${sourceY} C${sourceX},${(sourceY + targetY) / 2} ${targetX},${(sourceY + targetY) / 2} ${targetX},${targetY}`;\n  const middleX = (sourceX + targetX) / 2;\n  const middleY = (sourceY + targetY) / 2;\n\n  return (\n    <>\n      <path\n        id={id}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd=\"url(#arrowclosed)\"\n      />\n      <foreignObject\n        width={40}\n        height={40}\n        x={middleX - 20}\n        y={middleY - 20}\n        className=\"edgebutton-foreignobject\"\n      >\n        <AddButton onClick={(e) => onClick(e, id)} edgeId={id} />\n      </foreignObject>\n    </>\n  );\n};\n\nconst edgeTypes = {\n  buttonedge: ButtonEdge,\n};\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  \n  const [showNodeMenu, setShowNodeMenu] = useState(false);\n  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 });\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const nodeIdCounter = useRef(1);\n  const branchIdCounter = useRef(1);\n\n  const generateNodeId = (prefix) => `${prefix}-${nodeIdCounter.current++}`;\n  const generateBranchId = () => `branch-${branchIdCounter.current++}`;\n\n  // Handle connecting nodes\n  const onConnect = useCallback(\n    (params) => {\n      setEdges((eds) =>\n        addEdge(\n          {\n            ...params,\n            type: 'buttonedge',\n            markerEnd: { type: MarkerType.ArrowClosed },\n            data: { onClick: handleAddButtonClick },\n          },\n          eds\n        )\n      );\n    },\n    [setEdges]\n  );\n\n  // Handle edge click to show Add button\n  const handleAddButtonClick = useCallback((event, edgeId) => {\n    event.stopPropagation();\n    setSelectedEdgeId(edgeId);\n    setShowNodeMenu(true);\n    setMenuPosition({ \n      x: event.clientX, \n      y: event.clientY \n    });\n  }, []);\n\n  // Handle background click to hide node menu\n  const onPaneClick = useCallback(() => {\n    setShowNodeMenu(false);\n    setSelectedEdgeId(null);\n  }, []);\n\n  // Calculate position for the new node\n  const calculateNewNodePosition = useCallback(\n    (edgeId) => {\n      const edge = edges.find((e) => e.id === edgeId);\n      if (!edge) return { x: 0, y: 0 };\n      \n      // Find source and target nodes\n      const sourceNode = nodes.find((n) => n.id === edge.source);\n      const targetNode = nodes.find((n) => n.id === edge.target);\n      \n      // Calculate middle position\n      const x = (sourceNode.position.x + targetNode.position.x) / 2;\n      const y = (sourceNode.position.y + targetNode.position.y) / 2;\n      \n      return { x, y };\n    },\n    [edges, nodes]\n  );\n\n  // Add Action Node\n  const addActionNode = useCallback(() => {\n    if (!selectedEdgeId) return;\n    \n    const edge = edges.find((e) => e.id === selectedEdgeId);\n    if (!edge) return;\n    \n    const pos = calculateNewNodePosition(selectedEdgeId);\n    const newNodeId = generateNodeId('action');\n    \n    // Create new action node\n    const newNode = {\n      id: newNodeId,\n      type: 'action',\n      position: pos,\n      data: {\n        name: 'New Action',\n        onChange: handleChangeNodeName,\n        onDelete: handleDeleteNode,\n      },\n    };\n    \n    // Create new edges\n    const newEdge1 = {\n      id: `${edge.source}-${newNodeId}`,\n      source: edge.source,\n      target: newNodeId,\n      type: 'buttonedge',\n      markerEnd: { type: MarkerType.ArrowClosed },\n      data: { onClick: handleAddButtonClick },\n    };\n    \n    const newEdge2 = {\n      id: `${newNodeId}-${edge.target}`,\n      source: newNodeId,\n      target: edge.target,\n      type: 'buttonedge',\n      markerEnd: { type: MarkerType.ArrowClosed },\n      data: { onClick: handleAddButtonClick },\n    };\n    \n    // Update nodes and edges\n    setNodes((nds) => [...nds, newNode]);\n    setEdges((eds) => {\n      const filteredEdges = eds.filter((e) => e.id !== selectedEdgeId);\n      return [...filteredEdges, newEdge1, newEdge2];\n    });\n    \n    setShowNodeMenu(false);\n    setSelectedEdgeId(null);\n  }, [selectedEdgeId, edges, calculateNewNodePosition, setNodes, setEdges, handleAddButtonClick]);\n\n  // Add If/Else Node\n  const addIfElseNode = useCallback(() => {\n    if (!selectedEdgeId) return;\n    \n    const edge = edges.find((e) => e.id === selectedEdgeId);\n    if (!edge) return;\n    \n    const pos = calculateNewNodePosition(selectedEdgeId);\n    const ifElseId = generateNodeId('ifElse');\n    const branchId = generateBranchId();\n    const branchNodeId = generateNodeId('branch');\n    const elseNodeId = generateNodeId('else');\n    \n    // Create If/Else node\n    const ifElseNode = {\n      id: ifElseId,\n      type: 'ifElse',\n      position: pos,\n      data: {\n        name: 'Condition',\n        branches: [{ id: branchId, name: 'True' }],\n        onChange: handleChangeNodeName,\n        onDelete: handleDeleteIfElseNode,\n        onAddBranch: handleAddBranch,\n        onChangeBranchName: handleChangeBranchName,\n      },\n    };\n    \n    // Create branch node\n    const branchNode = {\n      id: branchNodeId,\n      type: 'branch',\n      position: { x: pos.x - 100, y: pos.y + 100 },\n      data: { name: 'True' },\n      parentNode: ifElseId,\n    };\n    \n    // Create else node\n    const elseNode = {\n      id: elseNodeId,\n      type: 'else',\n      position: { x: pos.x + 100, y: pos.y + 100 },\n      data: {},\n      parentNode: ifElseId,\n    };\n    \n    // Create new edges\n    const newEdge1 = {\n      id: `${edge.source}-${ifElseId}`,\n      source: edge.source,\n      target: ifElseId,\n      type: 'buttonedge',\n      markerEnd: { type: MarkerType.ArrowClosed },\n      data: { onClick: handleAddButtonClick },\n    };\n    \n    const newEdge2 = {\n      id: `${branchNodeId}-${edge.target}`,\n      source: branchNodeId,\n      target: edge.target,\n      type: 'buttonedge',\n      markerEnd: { type: MarkerType.ArrowClosed },\n      data: { onClick: handleAddButtonClick },\n    };\n    \n    const newEdge3 = {\n      id: `${elseNodeId}-${edge.target}`,\n      source: elseNodeId,\n      target: edge.target,\n      type: 'buttonedge',\n      markerEnd: { type: MarkerType.ArrowClosed },\n      data: { onClick: handleAddButtonClick },\n    };\n    \n    // Update nodes and edges\n    setNodes((nds) => [...nds, ifElseNode, branchNode, elseNode]);\n    setEdges((eds) => {\n      const filteredEdges = eds.filter((e) => e.id !== selectedEdgeId);\n      return [...filteredEdges, newEdge1, newEdge2, newEdge3];\n    });\n    \n    setShowNodeMenu(false);\n    setSelectedEdgeId(null);\n  }, [selectedEdgeId, edges, calculateNewNodePosition, setNodes, setEdges, handleAddButtonClick]);\n\n  // Change node name\n  const handleChangeNodeName = useCallback(\n    (nodeId, newName) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                name: newName,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  // Delete Action node\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      // Find incoming and outgoing edges\n      const incomingEdges = edges.filter((e) => e.target === nodeId);\n      const outgoingEdges = edges.filter((e) => e.source === nodeId);\n      \n      // Create new connections between the nodes that were connected to this node\n      const newConnections = [];\n      for (const incoming of incomingEdges) {\n        for (const outgoing of outgoingEdges) {\n          newConnections.push({\n            id: `${incoming.source}-${outgoing.target}`,\n            source: incoming.source,\n            target: outgoing.target,\n            type: 'buttonedge',\n            markerEnd: { type: MarkerType.ArrowClosed },\n            data: { onClick: handleAddButtonClick },\n          });\n        }\n      }\n      \n      // Remove the node and its connected edges\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n      setEdges((eds) => {\n        const filteredEdges = eds.filter(\n          (e) => e.source !== nodeId && e.target !== nodeId\n        );\n        return [...filteredEdges, ...newConnections];\n      });\n    },\n    [edges, setNodes, setEdges, handleAddButtonClick]\n  );\n\n  // Delete If/Else node\n  const handleDeleteIfElseNode = useCallback(\n    (nodeId) => {\n      // Find all child nodes\n      const childNodes = nodes.filter((node) => node.parentNode === nodeId);\n      const childNodeIds = childNodes.map((node) => node.id);\n      \n      // Find incoming and outgoing edges\n      const incomingEdges = edges.filter((e) => e.target === nodeId);\n      const outgoingEdges = edges.filter((e) => \n        childNodeIds.includes(e.source) && !childNodeIds.includes(e.target)\n      );\n      \n      // Create new connections\n      const newConnections = [];\n      for (const incoming of incomingEdges) {\n        for (const outgoing of outgoingEdges) {\n          newConnections.push({\n            id: `${incoming.source}-${outgoing.target}`,\n            source: incoming.source,\n            target: outgoing.target,\n            type: 'buttonedge',\n            markerEnd: { type: MarkerType.ArrowClosed },\n            data: { onClick: handleAddButtonClick },\n          });\n        }\n      }\n      \n      // Remove the If/Else node, its children, and connected edges\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId && node.parentNode !== nodeId));\n      setEdges((eds) => {\n        const filteredEdges = eds.filter(\n          (e) => \n            e.source !== nodeId && \n            e.target !== nodeId && \n            !childNodeIds.includes(e.source) && \n            !childNodeIds.includes(e.target)\n        );\n        return [...filteredEdges, ...newConnections];\n      });\n    },\n    [nodes, edges, setNodes, setEdges, handleAddButtonClick]\n  );\n\n  // Add branch to If/Else node\n  const handleAddBranch = useCallback(\n    (nodeId, branchName) => {\n      const ifElseNode = nodes.find((node) => node.id === nodeId);\n      if (!ifElseNode) return;\n      \n      const branchId = generateBranchId();\n      const branchNodeId = generateNodeId('branch');\n      \n      // Update If/Else node with new branch\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            const updatedBranches = [\n              ...node.data.branches,\n              { id: branchId, name: branchName }\n            ];\n            \n            return {\n              ...node,\n              data: {\n                ...node.data,\n                branches: updatedBranches,\n              },\n            };\n          }\n          return node;\n        })\n      );\n      \n      // Calculate position for new branch node\n      const existingBranchNodes = nodes.filter(\n        (n) => n.parentNode === nodeId && n.type === 'branch'\n      );\n      const branchCount = existingBranchNodes.length;\n      \n      // Create new branch node\n      const newBranchNode = {\n        id: branchNodeId,\n        type: 'branch',\n        position: { \n          x: ifElseNode.position.x - 100 + branchCount * 100, \n          y: ifElseNode.position.y + 100 \n        },\n        data: { name: branchName },\n        parentNode: nodeId,\n      };\n      \n      // Find target node for new connection\n      const elseNode = nodes.find((n) => n.parentNode === nodeId && n.type === 'else');\n      const outgoingEdges = edges.filter((e) => e.source === elseNode.id);\n      const targetNodeId = outgoingEdges[0]?.target;\n      \n      // Create new edge\n      const newEdge = {\n        id: `${branchNodeId}-${targetNodeId}`,\n        source: branchNodeId,\n        target: targetNodeId,\n        type: 'buttonedge',\n        markerEnd: { type: MarkerType.ArrowClosed },\n        data: { onClick: handleAddButtonClick },\n      };\n      \n      // Update nodes and edges\n      setNodes((nds) => [...nds, newBranchNode]);\n      setEdges((eds) => [...eds, newEdge]);\n    },\n    [nodes, edges, setNodes, setEdges, handleAddButtonClick]\n  );\n\n  // Change branch name\n  const handleChangeBranchName = useCallback(\n    (nodeId, branchId, newName) => {\n      // Update the branch name in the If/Else node data\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            const updatedBranches = node.data.branches.map((branch) =>\n              branch.id === branchId ? { ...branch, name: newName } : branch\n            );\n            \n            return {\n              ...node,\n              data: {\n                ...node.data,\n                branches: updatedBranches,\n              },\n            };\n          }\n          return node;\n        })\n      );\n      \n      // Update the branch node label\n      const branchIndex = nodes\n        .find((n) => n.id === nodeId)\n        ?.data.branches.findIndex((b) => b.id === branchId);\n      \n      if (branchIndex === undefined) return;\n      \n      const branchNodes = nodes.filter(\n        (n) => n.parentNode === nodeId && n.type === 'branch'\n      );\n      \n      if (branchNodes[branchIndex]) {\n        setNodes((nds) =>\n          nds.map((node) => {\n            if (node.id === branchNodes[branchIndex].id) {\n              return {\n                ...node,\n                data: {\n                  ...node.data,\n                  name: newName,\n                },\n              };\n            }\n            return node;\n          })\n        );\n      }\n    },\n    [nodes, setNodes]\n  );\n\n  // Define custom components for ReactFlow\n  const edgeOptions = {\n    type: 'buttonedge',\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n    },\n    data: { onClick: handleAddButtonClick },\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>React Flow Workflow Builder</h1>\n      <div className=\"flow-container\">\n        <ReactFlowProvider>\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onPaneClick={onPaneClick}\n            nodeTypes={nodeTypes}\n            edgeTypes={edgeTypes}\n            defaultEdgeOptions={edgeOptions}\n            fitView\n          >\n            <Controls />\n            <Background color=\"#aaa\" gap={16} />\n            \n            {showNodeMenu && (\n              <NodeSelection\n                position={menuPosition}\n                onSelect={(type) => {\n                  if (type === 'action') {\n                    addActionNode();\n                  } else if (type === 'ifElse') {\n                    addIfElseNode();\n                  }\n                }}\n                onClose={() => {\n                  setShowNodeMenu(false);\n                  setSelectedEdgeId(null);\n                }}\n              />\n            )}\n          </ReactFlow>\n        </ReactFlowProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default function AppWithProvider() {\n  return (\n    <ReactFlowProvider>\n      <App />\n    </ReactFlowProvider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}