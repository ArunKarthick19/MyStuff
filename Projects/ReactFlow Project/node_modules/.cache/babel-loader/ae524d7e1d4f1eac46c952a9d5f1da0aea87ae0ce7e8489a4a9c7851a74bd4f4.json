{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}, {\n  id: 'add-node-button-1',\n  position: {\n    x: 300,\n    y: 500\n  },\n  data: {\n    label: '+'\n  },\n  style: {\n    background: '#007bff',\n    color: 'white',\n    padding: 10,\n    borderRadius: 10,\n    textAlign: 'center',\n    cursor: 'pointer'\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 300,\n    y: 400\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->add-node-button-1',\n  source: 'start',\n  target: 'add-node-button-1',\n  type: 'smoothstep'\n}, {\n  id: 'add-node-button-1->end',\n  source: 'add-node-button-1',\n  target: 'end',\n  type: 'smoothstep'\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(1); // To generate unique node IDs\n  const [buttonCount, setButtonCount] = useState(2); // To generate unique button IDs\n\n  const addNodeHandler = buttonId => {\n    const newNodeId = `node-${nodeCount}`;\n    const newButtonId = `add-node-button-${buttonCount}`;\n\n    // Find the button node that was clicked\n    const buttonNode = nodes.find(node => node.id === buttonId);\n\n    // Calculate positions for the new node and the new button\n    const newNodePosition = {\n      x: 300,\n      y: buttonNode.position.y + 50\n    };\n    const newButtonPosition = {\n      x: 300,\n      y: buttonNode.position.y + 100\n    };\n\n    // Create the new node\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: {\n        label: `Node ${nodeCount}`\n      },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000'\n      }\n    };\n\n    // Create the new button node\n    const newButtonNode = {\n      id: newButtonId,\n      position: newButtonPosition,\n      data: {\n        label: '+'\n      },\n      style: {\n        background: '#007bff',\n        color: 'white',\n        padding: 10,\n        borderRadius: 10,\n        textAlign: 'center',\n        cursor: 'pointer'\n      }\n    };\n\n    // Add the new node and button to the state\n    setNodes(nds => {\n      const updatedNodes = nds.map(node => {\n        if (node.id === buttonId) {\n          // Move the clicked button down\n          return {\n            ...node,\n            position: {\n              x: 300,\n              y: node.position.y + 100\n            }\n          };\n        }\n        return node;\n      });\n      return [...updatedNodes, newNode, newButtonNode];\n    });\n\n    // Update edges\n    setEdges(eds => {\n      const updatedEdges = eds.filter(edge => edge.target !== buttonId);\n      return [...updatedEdges, {\n        id: `e-${buttonId}-${newNodeId}`,\n        source: buttonId,\n        target: newNodeId,\n        type: 'smoothstep'\n      }, {\n        id: `e-${newNodeId}-${newButtonId}`,\n        source: newNodeId,\n        target: newButtonId,\n        type: 'smoothstep'\n      }, {\n        id: `e-${newButtonId}-end`,\n        source: newButtonId,\n        target: 'end',\n        type: 'smoothstep'\n      }];\n    });\n\n    // Increment counters\n    setNodeCount(nodeCount + 1);\n    setButtonCount(buttonCount + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), nodes.filter(node => node.data.label === '+').map(buttonNode => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addNodeHandler(buttonNode.id),\n      style: {\n        position: 'absolute',\n        top: `${buttonNode.position.y}px`,\n        left: `${buttonNode.position.x}px`,\n        transform: 'translate(-50%, -50%)',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"+\"\n    }, buttonNode.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NOCVM1rNTXu7j6BDnEratKhZcZA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","color","border","textAlign","cursor","initialEdges","source","target","type","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","buttonCount","setButtonCount","addNodeHandler","buttonId","newNodeId","newButtonId","buttonNode","find","node","newNodePosition","newButtonPosition","newNode","newButtonNode","nds","updatedNodes","map","eds","updatedEdges","filter","edge","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","variant","gap","size","onClick","top","left","transform","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n  {\n    id: 'add-node-button-1',\n    position: { x: 300, y: 500 },\n    data: { label: '+' },\n    style: {\n      background: '#007bff',\n      color: 'white',\n      padding: 10,\n      borderRadius: 10,\n      textAlign: 'center',\n      cursor: 'pointer',\n    },\n  },\n  {\n    id: 'end',\n    position: { x: 300, y: 400 },\n    data: { label: 'End Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n];\n\nconst initialEdges = [\n  { id: 'start->add-node-button-1', source: 'start', target: 'add-node-button-1', type: 'smoothstep' },\n  { id: 'add-node-button-1->end', source: 'add-node-button-1', target: 'end', type: 'smoothstep' },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(1); // To generate unique node IDs\n  const [buttonCount, setButtonCount] = useState(2); // To generate unique button IDs\n\n  const addNodeHandler = (buttonId) => {\n    const newNodeId = `node-${nodeCount}`;\n    const newButtonId = `add-node-button-${buttonCount}`;\n\n    // Find the button node that was clicked\n    const buttonNode = nodes.find((node) => node.id === buttonId);\n\n    // Calculate positions for the new node and the new button\n    const newNodePosition = { x: 300, y: buttonNode.position.y + 50 };\n    const newButtonPosition = { x: 300, y: buttonNode.position.y + 100 };\n\n    // Create the new node\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: { label: `Node ${nodeCount}` },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000',\n      },\n    };\n\n    // Create the new button node\n    const newButtonNode = {\n      id: newButtonId,\n      position: newButtonPosition,\n      data: { label: '+' },\n      style: {\n        background: '#007bff',\n        color: 'white',\n        padding: 10,\n        borderRadius: 10,\n        textAlign: 'center',\n        cursor: 'pointer',\n      },\n    };\n\n    // Add the new node and button to the state\n    setNodes((nds) => {\n      const updatedNodes = nds.map((node) => {\n        if (node.id === buttonId) {\n          // Move the clicked button down\n          return { ...node, position: { x: 300, y: node.position.y + 100 } };\n        }\n        return node;\n      });\n      return [...updatedNodes, newNode, newButtonNode];\n    });\n\n    // Update edges\n    setEdges((eds) => {\n      const updatedEdges = eds.filter((edge) => edge.target !== buttonId);\n      return [\n        ...updatedEdges,\n        {\n          id: `e-${buttonId}-${newNodeId}`,\n          source: buttonId,\n          target: newNodeId,\n          type: 'smoothstep',\n        },\n        {\n          id: `e-${newNodeId}-${newButtonId}`,\n          source: newNodeId,\n          target: newButtonId,\n          type: 'smoothstep',\n        },\n        {\n          id: `e-${newButtonId}-end`,\n          source: newButtonId,\n          target: 'end',\n          type: 'smoothstep',\n        },\n      ];\n    });\n\n    // Increment counters\n    setNodeCount(nodeCount + 1);\n    setButtonCount(buttonCount + 1);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n\n      {/* Render Add Node Buttons */}\n      {nodes\n        .filter((node) => node.data.label === '+')\n        .map((buttonNode) => (\n          <button\n            key={buttonNode.id}\n            onClick={() => addNodeHandler(buttonNode.id)}\n            style={{\n              position: 'absolute',\n              top: `${buttonNode.position.y}px`,\n              left: `${buttonNode.position.x}px`,\n              transform: 'translate(-50%, -50%)',\n              padding: '10px',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer',\n            }}\n          >\n            +\n          </button>\n        ))}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}