{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel } from 'reactflow';\n\n// Import the new reactflow styles\nimport 'reactflow/dist/style.css';\n\n// Node types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_TYPES = {\n  START: 'start',\n  END: 'end',\n  ACTION: 'action',\n  IF_ELSE: 'if_else',\n  BRANCH: 'branch',\n  ELSE: 'else'\n};\n\n// Initial nodes with Start and End\nconst initialNodes = [{\n  id: 'start',\n  type: NODE_TYPES.START,\n  position: {\n    x: 250,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffcc00',\n    padding: 10,\n    borderRadius: 5\n  }\n}, {\n  id: 'end',\n  type: NODE_TYPES.END,\n  position: {\n    x: 250,\n    y: 400\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#66ccff',\n    padding: 10,\n    borderRadius: 5\n  }\n}];\n\n// Initial edge connecting Start to End\nconst initialEdges = [{\n  id: 'e-start-end',\n  source: 'start',\n  target: 'end',\n  type: 'default',\n  animated: false,\n  style: {\n    stroke: '#ff6347',\n    strokeWidth: 2\n  }\n}];\n\n// Custom Node Components\nconst ActionNode = ({\n  data,\n  id\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      background: '#a0d911',\n      borderRadius: '5px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          e.stopPropagation();\n          data.onEdit(id);\n        },\n        style: {\n          background: '#1890ff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '3px',\n          padding: '2px 5px'\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          e.stopPropagation();\n          data.onDelete(id);\n        },\n        style: {\n          background: '#f5222d',\n          color: 'white',\n          border: 'none',\n          borderRadius: '3px',\n          padding: '2px 5px'\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_c = ActionNode;\nconst IfElseNode = ({\n  data,\n  id\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      background: '#faad14',\n      borderRadius: '5px',\n      minWidth: '150px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          e.stopPropagation();\n          data.onEdit(id);\n        },\n        style: {\n          background: '#1890ff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '3px',\n          padding: '2px 5px'\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          e.stopPropagation();\n          data.onDelete(id);\n        },\n        style: {\n          background: '#f5222d',\n          color: 'white',\n          border: 'none',\n          borderRadius: '3px',\n          padding: '2px 5px'\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_c2 = IfElseNode;\nconst BranchNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      background: '#eb2f96',\n      borderRadius: '5px',\n      color: 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_c3 = BranchNode;\nconst ElseNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      background: '#722ed1',\n      borderRadius: '5px',\n      color: 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom node types mapping\n_c4 = ElseNode;\nconst nodeTypes = {\n  [NODE_TYPES.ACTION]: ActionNode,\n  [NODE_TYPES.IF_ELSE]: IfElseNode,\n  [NODE_TYPES.BRANCH]: BranchNode,\n  [NODE_TYPES.ELSE]: ElseNode\n};\nexport default function App() {\n  _s();\n  var _nodes$find, _nodes$find2;\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [ifElseCount, setIfElseCount] = useState(0);\n  const [showNodeMenu, setShowNodeMenu] = useState(false);\n  const [menuPosition, setMenuPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editingNode, setEditingNode] = useState(null);\n  const [editingNodeData, setEditingNodeData] = useState({\n    label: '',\n    branches: []\n  });\n  const [clickPosition, setClickPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Handle connections between nodes\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    type: 'default',\n    animated: false\n  }, eds)), [setEdges]);\n\n  // Handle node deletion\n  const handleDeleteNode = useCallback(id => {\n    // Get the node to delete\n    const nodeToDelete = nodes.find(node => node.id === id);\n    if (!nodeToDelete) return;\n\n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(edge => edge.target === id);\n    const outgoingEdges = edges.filter(edge => edge.source === id);\n\n    // If it's an if/else node, also delete its branch and else nodes\n    let nodesToDelete = [id];\n    if (nodeToDelete.type === NODE_TYPES.IF_ELSE) {\n      // Find all branch and else nodes connected to this if/else node\n      const relatedNodes = nodes.filter(node => (node.type === NODE_TYPES.BRANCH || node.type === NODE_TYPES.ELSE) && node.data.parentId === id);\n      nodesToDelete = [...nodesToDelete, ...relatedNodes.map(node => node.id)];\n    }\n\n    // Create new connections between the nodes that were connected to the deleted node\n    const newEdges = [];\n    if (incomingEdges.length > 0 && outgoingEdges.length > 0) {\n      incomingEdges.forEach(inEdge => {\n        outgoingEdges.forEach(outEdge => {\n          newEdges.push({\n            id: `e-${inEdge.source}-${outEdge.target}`,\n            source: inEdge.source,\n            target: outEdge.target,\n            type: 'default',\n            animated: false\n          });\n        });\n      });\n    }\n\n    // Update nodes and edges\n    setNodes(nds => nds.filter(node => !nodesToDelete.includes(node.id)));\n    setEdges(eds => [...eds.filter(edge => !nodesToDelete.includes(edge.source) && !nodesToDelete.includes(edge.target)), ...newEdges]);\n  }, [nodes, edges, setNodes, setEdges]);\n\n  // Handle node editing\n  const handleEditNode = useCallback(id => {\n    const node = nodes.find(n => n.id === id);\n    if (!node) return;\n    if (node.type === NODE_TYPES.ACTION) {\n      setEditingNodeData({\n        label: node.data.label\n      });\n    } else if (node.type === NODE_TYPES.IF_ELSE) {\n      // Find all branch nodes for this if/else node\n      const branchNodes = nodes.filter(n => n.type === NODE_TYPES.BRANCH && n.data.parentId === id);\n      const branches = branchNodes.map(branch => ({\n        id: branch.id,\n        label: branch.data.label\n      }));\n      setEditingNodeData({\n        label: node.data.label,\n        branches\n      });\n    }\n    setEditingNode(id);\n    setShowEditModal(true);\n  }, [nodes]);\n\n  // Save edited node\n  const handleSaveEdit = useCallback(() => {\n    if (!editingNode) return;\n    const nodeIndex = nodes.findIndex(n => n.id === editingNode);\n    if (nodeIndex === -1) return;\n    const node = nodes[nodeIndex];\n    const updatedNodes = [...nodes];\n    if (node.type === NODE_TYPES.ACTION) {\n      // Update action node label\n      updatedNodes[nodeIndex] = {\n        ...node,\n        data: {\n          ...node.data,\n          label: editingNodeData.label\n        }\n      };\n    } else if (node.type === NODE_TYPES.IF_ELSE) {\n      // Update if/else node label\n      updatedNodes[nodeIndex] = {\n        ...node,\n        data: {\n          ...node.data,\n          label: editingNodeData.label\n        }\n      };\n\n      // Update branch node labels\n      editingNodeData.branches.forEach(branch => {\n        const branchIndex = updatedNodes.findIndex(n => n.id === branch.id);\n        if (branchIndex !== -1) {\n          updatedNodes[branchIndex] = {\n            ...updatedNodes[branchIndex],\n            data: {\n              ...updatedNodes[branchIndex].data,\n              label: branch.label\n            }\n          };\n        }\n      });\n    }\n    setNodes(updatedNodes);\n    setShowEditModal(false);\n    setEditingNode(null);\n    setEditingNodeData({\n      label: '',\n      branches: []\n    });\n  }, [editingNode, editingNodeData, nodes, setNodes]);\n\n  // Add a new branch to an if/else node\n  const handleAddBranch = useCallback(() => {\n    if (!editingNode) return;\n    const node = nodes.find(n => n.id === editingNode);\n    if (!node || node.type !== NODE_TYPES.IF_ELSE) return;\n\n    // Create a new branch ID\n    const branchId = `branch-${editingNode}-${editingNodeData.branches.length}`;\n\n    // Add to the editing data\n    setEditingNodeData(prev => ({\n      ...prev,\n      branches: [...prev.branches, {\n        id: branchId,\n        label: `Branch ${prev.branches.length + 1}`\n      }]\n    }));\n\n    // Create the new branch node\n    const branchNode = {\n      id: branchId,\n      type: NODE_TYPES.BRANCH,\n      position: {\n        x: node.position.x + 200,\n        y: node.position.y + 100 + editingNodeData.branches.length * 100\n      },\n      data: {\n        label: `Branch ${editingNodeData.branches.length + 1}`,\n        parentId: editingNode\n      }\n    };\n\n    // Add the branch node\n    setNodes(nds => [...nds, branchNode]);\n\n    // Add edge from if/else to branch\n    setEdges(eds => [...eds, {\n      id: `e-${editingNode}-${branchId}`,\n      source: editingNode,\n      target: branchId,\n      type: 'default',\n      animated: false\n    }]);\n  }, [editingNode, editingNodeData, nodes, setNodes, setEdges]);\n\n  // Handle branch label change\n  const handleBranchLabelChange = useCallback((branchId, newLabel) => {\n    setEditingNodeData(prev => ({\n      ...prev,\n      branches: prev.branches.map(branch => branch.id === branchId ? {\n        ...branch,\n        label: newLabel\n      } : branch)\n    }));\n  }, []);\n\n  // Show node menu at the clicked position\n  const handleAddButtonClick = useCallback(() => {\n    // Calculate position for the menu\n    const position = {\n      x: 100,\n      y: 100\n    };\n    setMenuPosition(position);\n    setClickPosition(position);\n    setShowNodeMenu(true);\n  }, []);\n\n  // Add a new node based on the selected type\n  const handleAddNode = useCallback(type => {\n    setShowNodeMenu(false);\n\n    // Find the last node before the end node\n    const nonEndNodes = nodes.filter(node => node.id !== 'end');\n    const lastNode = nonEndNodes[nonEndNodes.length - 1];\n\n    // Calculate position for the new node\n    const position = {\n      x: clickPosition.x,\n      y: lastNode ? lastNode.position.y + 100 : 150\n    };\n    if (type === NODE_TYPES.ACTION) {\n      // Create a new action node\n      const newNodeId = `action-${nodeCount}`;\n      const newNode = {\n        id: newNodeId,\n        type: NODE_TYPES.ACTION,\n        position,\n        data: {\n          label: `Action Node ${nodeCount + 1}`,\n          onEdit: handleEditNode,\n          onDelete: handleDeleteNode\n        },\n        style: {\n          background: '#a0d911',\n          padding: 10,\n          borderRadius: 5\n        }\n      };\n\n      // Add the node\n      setNodes(nds => [...nds, newNode]);\n\n      // Update edges\n      updateEdgesForNewNode(newNodeId);\n\n      // Increment node count\n      setNodeCount(nodeCount + 1);\n    } else if (type === NODE_TYPES.IF_ELSE) {\n      // Create a new if/else node\n      const newIfElseId = `if-else-${ifElseCount}`;\n      const newBranchId = `branch-${newIfElseId}-0`;\n      const newElseId = `else-${newIfElseId}`;\n\n      // Create the if/else node\n      const ifElseNode = {\n        id: newIfElseId,\n        type: NODE_TYPES.IF_ELSE,\n        position,\n        data: {\n          label: `If/Else Node ${ifElseCount + 1}`,\n          onEdit: handleEditNode,\n          onDelete: handleDeleteNode\n        },\n        style: {\n          background: '#faad14',\n          padding: 10,\n          borderRadius: 5\n        }\n      };\n\n      // Create the branch node\n      const branchNode = {\n        id: newBranchId,\n        type: NODE_TYPES.BRANCH,\n        position: {\n          x: position.x + 200,\n          y: position.y\n        },\n        data: {\n          label: 'Branch 1',\n          parentId: newIfElseId\n        },\n        style: {\n          background: '#eb2f96',\n          padding: 10,\n          borderRadius: 5,\n          color: 'white'\n        }\n      };\n\n      // Create the else node\n      const elseNode = {\n        id: newElseId,\n        type: NODE_TYPES.ELSE,\n        position: {\n          x: position.x + 200,\n          y: position.y + 100\n        },\n        data: {\n          label: 'Else',\n          parentId: newIfElseId\n        },\n        style: {\n          background: '#722ed1',\n          padding: 10,\n          borderRadius: 5,\n          color: 'white'\n        }\n      };\n\n      // Add the nodes\n      setNodes(nds => [...nds, ifElseNode, branchNode, elseNode]);\n\n      // Add edges\n      const newEdges = [{\n        id: `e-${newIfElseId}-${newBranchId}`,\n        source: newIfElseId,\n        target: newBranchId,\n        type: 'default',\n        animated: false\n      }, {\n        id: `e-${newIfElseId}-${newElseId}`,\n        source: newIfElseId,\n        target: newElseId,\n        type: 'default',\n        animated: false\n      }];\n      setEdges(eds => [...eds, ...newEdges]);\n\n      // Update edges for the main flow\n      updateEdgesForNewNode(newIfElseId);\n\n      // Increment if/else count\n      setIfElseCount(ifElseCount + 1);\n    }\n  }, [clickPosition, nodeCount, ifElseCount, nodes, setNodes, setEdges, handleEditNode, handleDeleteNode]);\n\n  // Update edges when a new node is added\n  const updateEdgesForNewNode = useCallback(newNodeId => {\n    // Find the last node before the end node\n    const nonEndNodes = nodes.filter(node => node.id !== 'end' && node.id !== newNodeId);\n    const lastNode = nonEndNodes[nonEndNodes.length - 1];\n\n    // Create new edges\n    const newEdges = [];\n\n    // Connect the last node to the new node\n    if (lastNode) {\n      newEdges.push({\n        id: `e-${lastNode.id}-${newNodeId}`,\n        source: lastNode.id,\n        target: newNodeId,\n        type: 'default',\n        animated: true\n      });\n    }\n\n    // Connect the new node to the end node\n    newEdges.push({\n      id: `e-${newNodeId}-end`,\n      source: newNodeId,\n      target: 'end',\n      type: 'smoothstep',\n      animated: true\n    });\n\n    // Remove any direct connections to the end node from other nodes\n    setEdges(eds => [...eds.filter(edge => edge.target !== 'end'), ...newEdges]);\n  }, [nodes, setEdges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: reactFlowWrapper,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        onInit: setReactFlowInstance,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Panel, {\n          position: \"top-left\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddButtonClick,\n            style: {\n              padding: '10px 20px',\n              background: '#007bff',\n              color: '#fff',\n              border: 'none',\n              borderRadius: 5,\n              cursor: 'pointer'\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this), showNodeMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: menuPosition.y,\n        left: menuPosition.x,\n        background: 'white',\n        border: '1px solid #ccc',\n        borderRadius: 5,\n        padding: 10,\n        zIndex: 10,\n        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 10,\n          fontWeight: 'bold'\n        },\n        children: \"Select Node Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddNode(NODE_TYPES.ACTION),\n        style: {\n          display: 'block',\n          width: '100%',\n          padding: '8px 16px',\n          marginBottom: 5,\n          background: '#a0d911',\n          color: 'white',\n          border: 'none',\n          borderRadius: 3,\n          cursor: 'pointer'\n        },\n        children: \"Action Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddNode(NODE_TYPES.IF_ELSE),\n        style: {\n          display: 'block',\n          width: '100%',\n          padding: '8px 16px',\n          background: '#faad14',\n          color: 'white',\n          border: 'none',\n          borderRadius: 3,\n          cursor: 'pointer'\n        },\n        children: \"If/Else Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 9\n    }, this), showEditModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'rgba(0, 0, 0, 0.5)',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'white',\n          padding: 20,\n          borderRadius: 5,\n          width: 400,\n          maxWidth: '90%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: editingNode && ((_nodes$find = nodes.find(n => n.id === editingNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.type) === NODE_TYPES.ACTION ? 'Edit Action Node' : 'Edit If/Else Node'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 15\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginBottom: 5\n            },\n            children: \"Node Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editingNodeData.label,\n            onChange: e => setEditingNodeData(prev => ({\n              ...prev,\n              label: e.target.value\n            })),\n            style: {\n              width: '100%',\n              padding: '8px',\n              border: '1px solid #ccc',\n              borderRadius: 3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 13\n        }, this), editingNode && ((_nodes$find2 = nodes.find(n => n.id === editingNode)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.type) === NODE_TYPES.IF_ELSE && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Branches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 17\n          }, this), editingNodeData.branches.map(branch => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: 10\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: branch.label,\n              onChange: e => handleBranchLabelChange(branch.id, e.target.value),\n              style: {\n                flex: 1,\n                padding: '8px',\n                border: '1px solid #ccc',\n                borderRadius: 3,\n                marginRight: 10\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 21\n            }, this)\n          }, branch.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddBranch,\n            style: {\n              padding: '8px 16px',\n              background: '#52c41a',\n              color: 'white',\n              border: 'none',\n              borderRadius: 3,\n              cursor: 'pointer',\n              marginTop: 10\n            },\n            children: \"Add Branch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            marginTop: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setShowEditModal(false);\n              setEditingNode(null);\n            },\n            style: {\n              padding: '8px 16px',\n              background: '#f5f5f5',\n              border: '1px solid #d9d9d9',\n              borderRadius: 3,\n              marginRight: 10,\n              cursor: 'pointer'\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSaveEdit,\n            style: {\n              padding: '8px 16px',\n              background: '#1890ff',\n              color: 'white',\n              border: 'none',\n              borderRadius: 3,\n              cursor: 'pointer'\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0t8z1Q8jeCnK0iyzo3bfs6Z+mSU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c5 = App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"ActionNode\");\n$RefreshReg$(_c2, \"IfElseNode\");\n$RefreshReg$(_c3, \"BranchNode\");\n$RefreshReg$(_c4, \"ElseNode\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","jsxDEV","_jsxDEV","NODE_TYPES","START","END","ACTION","IF_ELSE","BRANCH","ELSE","initialNodes","id","type","position","x","y","data","label","style","background","padding","borderRadius","initialEdges","source","target","animated","stroke","strokeWidth","ActionNode","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","marginTop","onClick","e","stopPropagation","onEdit","color","border","onDelete","_c","IfElseNode","minWidth","_c2","BranchNode","_c3","ElseNode","_c4","nodeTypes","App","_s","_nodes$find","_nodes$find2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","ifElseCount","setIfElseCount","showNodeMenu","setShowNodeMenu","menuPosition","setMenuPosition","showEditModal","setShowEditModal","editingNode","setEditingNode","editingNodeData","setEditingNodeData","branches","clickPosition","setClickPosition","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","onConnect","params","eds","handleDeleteNode","nodeToDelete","find","node","incomingEdges","filter","edge","outgoingEdges","nodesToDelete","relatedNodes","parentId","map","newEdges","length","forEach","inEdge","outEdge","push","nds","includes","handleEditNode","n","branchNodes","branch","handleSaveEdit","nodeIndex","findIndex","updatedNodes","branchIndex","handleAddBranch","branchId","prev","branchNode","handleBranchLabelChange","newLabel","handleAddButtonClick","handleAddNode","nonEndNodes","lastNode","newNodeId","newNode","updateEdgesForNewNode","newIfElseId","newBranchId","newElseId","ifElseNode","elseNode","width","height","ref","onInit","fitView","variant","gap","size","cursor","top","left","zIndex","boxShadow","marginBottom","fontWeight","right","bottom","alignItems","maxWidth","value","onChange","flex","marginRight","_c5","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n} from 'reactflow';\n\n// Import the new reactflow styles\nimport 'reactflow/dist/style.css';\n\n// Node types\nconst NODE_TYPES = {\n  START: 'start',\n  END: 'end',\n  ACTION: 'action',\n  IF_ELSE: 'if_else',\n  BRANCH: 'branch',\n  ELSE: 'else',\n};\n\n// Initial nodes with Start and End\nconst initialNodes = [\n  {\n    id: 'start',\n    type: NODE_TYPES.START,\n    position: { x: 250, y: 50 },\n    data: { label: 'Start Node' },\n    style: { background: '#ffcc00', padding: 10, borderRadius: 5 },\n  },\n  {\n    id: 'end',\n    type: NODE_TYPES.END,\n    position: { x: 250, y: 400 },\n    data: { label: 'End Node' },\n    style: { background: '#66ccff', padding: 10, borderRadius: 5 },\n  },\n];\n\n// Initial edge connecting Start to End\nconst initialEdges = [\n  {\n    id: 'e-start-end',\n    source: 'start',\n    target: 'end',\n    type: 'default',\n    animated: false,\n    style: { stroke: '#ff6347', strokeWidth: 2 },\n  },\n];\n\n// Custom Node Components\nconst ActionNode = ({ data, id }) => {\n  return (\n    <div style={{ padding: '10px', background: '#a0d911', borderRadius: '5px' }}>\n      <div>{data.label}</div>\n      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '10px' }}>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            data.onEdit(id);\n          }}\n          style={{ background: '#1890ff', color: 'white', border: 'none', borderRadius: '3px', padding: '2px 5px' }}\n        >\n          Edit\n        </button>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            data.onDelete(id);\n          }}\n          style={{ background: '#f5222d', color: 'white', border: 'none', borderRadius: '3px', padding: '2px 5px' }}\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst IfElseNode = ({ data, id }) => {\n  return (\n    <div style={{ padding: '10px', background: '#faad14', borderRadius: '5px', minWidth: '150px' }}>\n      <div>{data.label}</div>\n      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '10px' }}>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            data.onEdit(id);\n          }}\n          style={{ background: '#1890ff', color: 'white', border: 'none', borderRadius: '3px', padding: '2px 5px' }}\n        >\n          Edit\n        </button>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            data.onDelete(id);\n          }}\n          style={{ background: '#f5222d', color: 'white', border: 'none', borderRadius: '3px', padding: '2px 5px' }}\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst BranchNode = ({ data }) => {\n  return (\n    <div style={{ padding: '10px', background: '#eb2f96', borderRadius: '5px', color: 'white' }}>\n      <div>{data.label}</div>\n    </div>\n  );\n};\n\nconst ElseNode = ({ data }) => {\n  return (\n    <div style={{ padding: '10px', background: '#722ed1', borderRadius: '5px', color: 'white' }}>\n      <div>{data.label}</div>\n    </div>\n  );\n};\n\n// Custom node types mapping\nconst nodeTypes = {\n  [NODE_TYPES.ACTION]: ActionNode,\n  [NODE_TYPES.IF_ELSE]: IfElseNode,\n  [NODE_TYPES.BRANCH]: BranchNode,\n  [NODE_TYPES.ELSE]: ElseNode,\n};\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [ifElseCount, setIfElseCount] = useState(0);\n  const [showNodeMenu, setShowNodeMenu] = useState(false);\n  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 });\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editingNode, setEditingNode] = useState(null);\n  const [editingNodeData, setEditingNodeData] = useState({\n    label: '',\n    branches: [],\n  });\n  const [clickPosition, setClickPosition] = useState({ x: 0, y: 0 });\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Handle connections between nodes\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge({ ...params, type: 'default', animated: false }, eds)),\n    [setEdges]\n  );\n\n  // Handle node deletion\n  const handleDeleteNode = useCallback(\n    (id) => {\n      // Get the node to delete\n      const nodeToDelete = nodes.find((node) => node.id === id);\n      if (!nodeToDelete) return;\n\n      // Find incoming and outgoing edges\n      const incomingEdges = edges.filter((edge) => edge.target === id);\n      const outgoingEdges = edges.filter((edge) => edge.source === id);\n\n      // If it's an if/else node, also delete its branch and else nodes\n      let nodesToDelete = [id];\n      if (nodeToDelete.type === NODE_TYPES.IF_ELSE) {\n        // Find all branch and else nodes connected to this if/else node\n        const relatedNodes = nodes.filter(\n          (node) =>\n            (node.type === NODE_TYPES.BRANCH || node.type === NODE_TYPES.ELSE) &&\n            node.data.parentId === id\n        );\n        nodesToDelete = [...nodesToDelete, ...relatedNodes.map((node) => node.id)];\n      }\n\n      // Create new connections between the nodes that were connected to the deleted node\n      const newEdges = [];\n      if (incomingEdges.length > 0 && outgoingEdges.length > 0) {\n        incomingEdges.forEach((inEdge) => {\n          outgoingEdges.forEach((outEdge) => {\n            newEdges.push({\n              id: `e-${inEdge.source}-${outEdge.target}`,\n              source: inEdge.source,\n              target: outEdge.target,\n              type: 'default',\n              animated: false,\n            });\n          });\n        });\n      }\n\n      // Update nodes and edges\n      setNodes((nds) => nds.filter((node) => !nodesToDelete.includes(node.id)));\n      setEdges((eds) => [\n        ...eds.filter(\n          (edge) =>\n            !nodesToDelete.includes(edge.source) && !nodesToDelete.includes(edge.target)\n        ),\n        ...newEdges,\n      ]);\n    },\n    [nodes, edges, setNodes, setEdges]\n  );\n\n  // Handle node editing\n  const handleEditNode = useCallback(\n    (id) => {\n      const node = nodes.find((n) => n.id === id);\n      if (!node) return;\n\n      if (node.type === NODE_TYPES.ACTION) {\n        setEditingNodeData({ label: node.data.label });\n      } else if (node.type === NODE_TYPES.IF_ELSE) {\n        // Find all branch nodes for this if/else node\n        const branchNodes = nodes.filter(\n          (n) => n.type === NODE_TYPES.BRANCH && n.data.parentId === id\n        );\n        const branches = branchNodes.map((branch) => ({\n          id: branch.id,\n          label: branch.data.label,\n        }));\n\n        setEditingNodeData({\n          label: node.data.label,\n          branches,\n        });\n      }\n\n      setEditingNode(id);\n      setShowEditModal(true);\n    },\n    [nodes]\n  );\n\n  // Save edited node\n  const handleSaveEdit = useCallback(() => {\n    if (!editingNode) return;\n\n    const nodeIndex = nodes.findIndex((n) => n.id === editingNode);\n    if (nodeIndex === -1) return;\n\n    const node = nodes[nodeIndex];\n    const updatedNodes = [...nodes];\n\n    if (node.type === NODE_TYPES.ACTION) {\n      // Update action node label\n      updatedNodes[nodeIndex] = {\n        ...node,\n        data: {\n          ...node.data,\n          label: editingNodeData.label,\n        },\n      };\n    } else if (node.type === NODE_TYPES.IF_ELSE) {\n      // Update if/else node label\n      updatedNodes[nodeIndex] = {\n        ...node,\n        data: {\n          ...node.data,\n          label: editingNodeData.label,\n        },\n      };\n\n      // Update branch node labels\n      editingNodeData.branches.forEach((branch) => {\n        const branchIndex = updatedNodes.findIndex((n) => n.id === branch.id);\n        if (branchIndex !== -1) {\n          updatedNodes[branchIndex] = {\n            ...updatedNodes[branchIndex],\n            data: {\n              ...updatedNodes[branchIndex].data,\n              label: branch.label,\n            },\n          };\n        }\n      });\n    }\n\n    setNodes(updatedNodes);\n    setShowEditModal(false);\n    setEditingNode(null);\n    setEditingNodeData({ label: '', branches: [] });\n  }, [editingNode, editingNodeData, nodes, setNodes]);\n\n  // Add a new branch to an if/else node\n  const handleAddBranch = useCallback(() => {\n    if (!editingNode) return;\n\n    const node = nodes.find((n) => n.id === editingNode);\n    if (!node || node.type !== NODE_TYPES.IF_ELSE) return;\n\n    // Create a new branch ID\n    const branchId = `branch-${editingNode}-${editingNodeData.branches.length}`;\n\n    // Add to the editing data\n    setEditingNodeData((prev) => ({\n      ...prev,\n      branches: [\n        ...prev.branches,\n        {\n          id: branchId,\n          label: `Branch ${prev.branches.length + 1}`,\n        },\n      ],\n    }));\n\n    // Create the new branch node\n    const branchNode = {\n      id: branchId,\n      type: NODE_TYPES.BRANCH,\n      position: {\n        x: node.position.x + 200,\n        y: node.position.y + 100 + editingNodeData.branches.length * 100,\n      },\n      data: {\n        label: `Branch ${editingNodeData.branches.length + 1}`,\n        parentId: editingNode,\n      },\n    };\n\n    // Add the branch node\n    setNodes((nds) => [...nds, branchNode]);\n\n    // Add edge from if/else to branch\n    setEdges((eds) => [\n      ...eds,\n      {\n        id: `e-${editingNode}-${branchId}`,\n        source: editingNode,\n        target: branchId,\n        type: 'default',\n        animated: false,\n      },\n    ]);\n  }, [editingNode, editingNodeData, nodes, setNodes, setEdges]);\n\n  // Handle branch label change\n  const handleBranchLabelChange = useCallback(\n    (branchId, newLabel) => {\n      setEditingNodeData((prev) => ({\n        ...prev,\n        branches: prev.branches.map((branch) =>\n          branch.id === branchId ? { ...branch, label: newLabel } : branch\n        ),\n      }));\n    },\n    []\n  );\n\n  // Show node menu at the clicked position\n  const handleAddButtonClick = useCallback(() => {\n    // Calculate position for the menu\n    const position = {\n      x: 100,\n      y: 100,\n    };\n\n    setMenuPosition(position);\n    setClickPosition(position);\n    setShowNodeMenu(true);\n  }, []);\n\n  // Add a new node based on the selected type\n  const handleAddNode = useCallback(\n    (type) => {\n      setShowNodeMenu(false);\n\n      // Find the last node before the end node\n      const nonEndNodes = nodes.filter((node) => node.id !== 'end');\n      const lastNode = nonEndNodes[nonEndNodes.length - 1];\n\n      // Calculate position for the new node\n      const position = {\n        x: clickPosition.x,\n        y: lastNode ? lastNode.position.y + 100 : 150,\n      };\n\n      if (type === NODE_TYPES.ACTION) {\n        // Create a new action node\n        const newNodeId = `action-${nodeCount}`;\n        const newNode = {\n          id: newNodeId,\n          type: NODE_TYPES.ACTION,\n          position,\n          data: {\n            label: `Action Node ${nodeCount + 1}`,\n            onEdit: handleEditNode,\n            onDelete: handleDeleteNode,\n          },\n          style: { background: '#a0d911', padding: 10, borderRadius: 5 },\n        };\n\n        // Add the node\n        setNodes((nds) => [...nds, newNode]);\n\n        // Update edges\n        updateEdgesForNewNode(newNodeId);\n\n        // Increment node count\n        setNodeCount(nodeCount + 1);\n      } else if (type === NODE_TYPES.IF_ELSE) {\n        // Create a new if/else node\n        const newIfElseId = `if-else-${ifElseCount}`;\n        const newBranchId = `branch-${newIfElseId}-0`;\n        const newElseId = `else-${newIfElseId}`;\n\n        // Create the if/else node\n        const ifElseNode = {\n          id: newIfElseId,\n          type: NODE_TYPES.IF_ELSE,\n          position,\n          data: {\n            label: `If/Else Node ${ifElseCount + 1}`,\n            onEdit: handleEditNode,\n            onDelete: handleDeleteNode,\n          },\n          style: { background: '#faad14', padding: 10, borderRadius: 5 },\n        };\n\n        // Create the branch node\n        const branchNode = {\n          id: newBranchId,\n          type: NODE_TYPES.BRANCH,\n          position: {\n            x: position.x + 200,\n            y: position.y,\n          },\n          data: {\n            label: 'Branch 1',\n            parentId: newIfElseId,\n          },\n          style: { background: '#eb2f96', padding: 10, borderRadius: 5, color: 'white' },\n        };\n\n        // Create the else node\n        const elseNode = {\n          id: newElseId,\n          type: NODE_TYPES.ELSE,\n          position: {\n            x: position.x + 200,\n            y: position.y + 100,\n          },\n          data: {\n            label: 'Else',\n            parentId: newIfElseId,\n          },\n          style: { background: '#722ed1', padding: 10, borderRadius: 5, color: 'white' },\n        };\n\n        // Add the nodes\n        setNodes((nds) => [...nds, ifElseNode, branchNode, elseNode]);\n\n        // Add edges\n        const newEdges = [\n          {\n            id: `e-${newIfElseId}-${newBranchId}`,\n            source: newIfElseId,\n            target: newBranchId,\n            type: 'default',\n            animated: false,\n          },\n          {\n            id: `e-${newIfElseId}-${newElseId}`,\n            source: newIfElseId,\n            target: newElseId,\n            type: 'default',\n            animated: false,\n          },\n        ];\n\n        setEdges((eds) => [...eds, ...newEdges]);\n\n        // Update edges for the main flow\n        updateEdgesForNewNode(newIfElseId);\n\n        // Increment if/else count\n        setIfElseCount(ifElseCount + 1);\n      }\n    },\n    [\n      clickPosition,\n      nodeCount,\n      ifElseCount,\n      nodes,\n      setNodes,\n      setEdges,\n      handleEditNode,\n      handleDeleteNode,\n    ]\n  );\n\n  // Update edges when a new node is added\n  const updateEdgesForNewNode = useCallback(\n    (newNodeId) => {\n      // Find the last node before the end node\n      const nonEndNodes = nodes.filter((node) => node.id !== 'end' && node.id !== newNodeId);\n      const lastNode = nonEndNodes[nonEndNodes.length - 1];\n\n      // Create new edges\n      const newEdges = [];\n\n      // Connect the last node to the new node\n      if (lastNode) {\n        newEdges.push({\n          id: `e-${lastNode.id}-${newNodeId}`,\n          source: lastNode.id,\n          target: newNodeId,\n          type: 'default',\n          animated: true,\n        });\n      }\n\n      // Connect the new node to the end node\n      newEdges.push({\n        id: `e-${newNodeId}-end`,\n        source: newNodeId,\n        target: 'end',\n        type: 'smoothstep',\n        animated: true,\n      });\n\n      // Remove any direct connections to the end node from other nodes\n      setEdges((eds) => [\n        ...eds.filter((edge) => edge.target !== 'end'),\n        ...newEdges,\n      ]);\n    },\n    [nodes, setEdges]\n  );\n\n  return (\n    <div style={{ width: '100vw', height: '100vh', position: 'relative' }}>\n      <div ref={reactFlowWrapper} style={{ width: '100%', height: '100%' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          onInit={setReactFlowInstance}\n          fitView\n        >\n          <Controls />\n          <MiniMap />\n          <Background variant=\"dots\" gap={12} size={1} />\n          <Panel position=\"top-left\">\n            <button\n              onClick={handleAddButtonClick}\n              style={{\n                padding: '10px 20px',\n                background: '#007bff',\n                color: '#fff',\n                border: 'none',\n                borderRadius: 5,\n                cursor: 'pointer',\n              }}\n            >\n              Add Node\n            </button>\n          </Panel>\n        </ReactFlow>\n      </div>\n\n      {/* Node Selection Menu */}\n      {showNodeMenu && (\n        <div\n          style={{\n            position: 'absolute',\n            top: menuPosition.y,\n            left: menuPosition.x,\n            background: 'white',\n            border: '1px solid #ccc',\n            borderRadius: 5,\n            padding: 10,\n            zIndex: 10,\n            boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\n          }}\n        >\n          <div style={{ marginBottom: 10, fontWeight: 'bold' }}>Select Node Type:</div>\n          <button\n            onClick={() => handleAddNode(NODE_TYPES.ACTION)}\n            style={{\n              display: 'block',\n              width: '100%',\n              padding: '8px 16px',\n              marginBottom: 5,\n              background: '#a0d911',\n              color: 'white',\n              border: 'none',\n              borderRadius: 3,\n              cursor: 'pointer',\n            }}\n          >\n            Action Node\n          </button>\n          <button\n            onClick={() => handleAddNode(NODE_TYPES.IF_ELSE)}\n            style={{\n              display: 'block',\n              width: '100%',\n              padding: '8px 16px',\n              background: '#faad14',\n              color: 'white',\n              border: 'none',\n              borderRadius: 3,\n              cursor: 'pointer',\n            }}\n          >\n            If/Else Node\n          </button>\n        </div>\n      )}\n\n      {/* Edit Modal */}\n      {showEditModal && (\n        <div\n          style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(0, 0, 0, 0.5)',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 1000,\n          }}\n        >\n          <div\n            style={{\n              background: 'white',\n              padding: 20,\n              borderRadius: 5,\n              width: 400,\n              maxWidth: '90%',\n            }}\n          >\n            <h3>\n              {editingNode && nodes.find((n) => n.id === editingNode)?.type === NODE_TYPES.ACTION\n                ? 'Edit Action Node'\n                : 'Edit If/Else Node'}\n            </h3>\n\n            <div style={{ marginBottom: 15 }}>\n              <label style={{ display: 'block', marginBottom: 5 }}>Node Name:</label>\n              <input\n                type=\"text\"\n                value={editingNodeData.label}\n                onChange={(e) =>\n                  setEditingNodeData((prev) => ({ ...prev, label: e.target.value }))\n                }\n                style={{\n                  width: '100%',\n                  padding: '8px',\n                  border: '1px solid #ccc',\n                  borderRadius: 3,\n                }}\n              />\n            </div>\n\n            {editingNode && nodes.find((n) => n.id === editingNode)?.type === NODE_TYPES.IF_ELSE && (\n              <div>\n                <h4>Branches</h4>\n                {editingNodeData.branches.map((branch) => (\n                  <div key={branch.id} style={{ display: 'flex', marginBottom: 10 }}>\n                    <input\n                      type=\"text\"\n                      value={branch.label}\n                      onChange={(e) => handleBranchLabelChange(branch.id, e.target.value)}\n                      style={{\n                        flex: 1,\n                        padding: '8px',\n                        border: '1px solid #ccc',\n                        borderRadius: 3,\n                        marginRight: 10,\n                      }}\n                    />\n                  </div>\n                ))}\n                <button\n                  onClick={handleAddBranch}\n                  style={{\n                    padding: '8px 16px',\n                    background: '#52c41a',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: 3,\n                    cursor: 'pointer',\n                    marginTop: 10,\n                  }}\n                >\n                  Add Branch\n                </button>\n              </div>\n            )}\n\n            <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: 20 }}>\n              <button\n                onClick={() => {\n                  setShowEditModal(false);\n                  setEditingNode(null);\n                }}\n                style={{\n                  padding: '8px 16px',\n                  background: '#f5f5f5',\n                  border: '1px solid #d9d9d9',\n                  borderRadius: 3,\n                  marginRight: 10,\n                  cursor: 'pointer',\n                }}\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveEdit}\n                style={{\n                  padding: '8px 16px',\n                  background: '#1890ff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: 3,\n                  cursor: 'pointer',\n                }}\n              >\n                Save\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}