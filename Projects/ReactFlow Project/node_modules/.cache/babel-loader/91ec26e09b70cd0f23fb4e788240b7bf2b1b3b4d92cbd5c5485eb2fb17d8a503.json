{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport 'react-flow-renderer/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 250,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffcc00',\n    padding: 10,\n    borderRadius: 5\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 250,\n    y: 400\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#66ccff',\n    padding: 10,\n    borderRadius: 5\n  }\n}];\nconst initialEdges = [{\n  id: 'e-start-end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep',\n  animated: true,\n  style: {\n    stroke: '#ff6347',\n    strokeWidth: 2\n  }\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(0); // To generate unique node IDs\n\n  const addNodeHandler = () => {\n    console.log('Add Node Button Clicked');\n    const newNodeId = `action-${nodeCount}`;\n    const newNode = {\n      id: newNodeId,\n      position: {\n        x: 250,\n        y: 200 + nodeCount * 100\n      },\n      // Position below the previous node\n      data: {\n        label: `Action Node ${nodeCount + 1}`\n      },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 5\n      }\n    };\n    setNodes(nds => {\n      const updatedNodes = [...nds, newNode];\n      const newEdges = [{\n        id: `e-${nds[nds.length - 1].id}-${newNodeId}`,\n        source: nds[nds.length - 1].id,\n        // Connect to the last node\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: {\n          stroke: '#1890ff',\n          strokeWidth: 2\n        }\n      }, {\n        id: `e-${newNodeId}-end`,\n        source: newNodeId,\n        target: 'end',\n        // Connect to the end node\n        type: 'smoothstep',\n        animated: true,\n        style: {\n          stroke: '#1890ff',\n          strokeWidth: 2\n        }\n      }];\n      setEdges(eds => [...eds.filter(edge => edge.target !== 'end'), ...newEdges]);\n      return updatedNodes;\n    });\n    setNodeCount(nodeCount + 1); // Increment node count\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNodeHandler,\n      style: {\n        position: 'absolute',\n        top: 10,\n        left: 10,\n        padding: '10px 20px',\n        background: '#007bff',\n        color: '#fff',\n        border: 'none',\n        borderRadius: 5,\n        cursor: 'pointer'\n      },\n      children: \"Add Action Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kIUz7iCQDU55HPBTm0J7nDzKnp0=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","initialEdges","source","target","type","animated","stroke","strokeWidth","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","addNodeHandler","console","log","newNodeId","newNode","nds","updatedNodes","newEdges","length","eds","filter","edge","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","variant","gap","size","onClick","top","left","color","border","cursor","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'react-flow-renderer';\n\nimport 'react-flow-renderer/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 250, y: 50 },\n    data: { label: 'Start Node' },\n    style: { background: '#ffcc00', padding: 10, borderRadius: 5 },\n  },\n  {\n    id: 'end',\n    position: { x: 250, y: 400 },\n    data: { label: 'End Node' },\n    style: { background: '#66ccff', padding: 10, borderRadius: 5 },\n  },\n];\n\nconst initialEdges = [\n  {\n    id: 'e-start-end',\n    source: 'start',\n    target: 'end',\n    type: 'smoothstep',\n    animated: true,\n    style: { stroke: '#ff6347', strokeWidth: 2 },\n  },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(0); // To generate unique node IDs\n\n  const addNodeHandler = () => {\n    console.log('Add Node Button Clicked');\n    const newNodeId = `action-${nodeCount}`;\n    const newNode = {\n      id: newNodeId,\n      position: { x: 250, y: 200 + nodeCount * 100 }, // Position below the previous node\n      data: { label: `Action Node ${nodeCount + 1}` },\n      style: { background: '#a0d911', padding: 10, borderRadius: 5 },\n    };\n\n    setNodes((nds) => {\n      const updatedNodes = [...nds, newNode];\n\n      const newEdges = [\n        {\n          id: `e-${nds[nds.length - 1].id}-${newNodeId}`,\n          source: nds[nds.length - 1].id, // Connect to the last node\n          target: newNodeId,\n          type: 'smoothstep',\n          animated: true,\n          style: { stroke: '#1890ff', strokeWidth: 2 },\n        },\n        {\n          id: `e-${newNodeId}-end`,\n          source: newNodeId,\n          target: 'end', // Connect to the end node\n          type: 'smoothstep',\n          animated: true,\n          style: { stroke: '#1890ff', strokeWidth: 2 },\n        },\n      ];\n\n      setEdges((eds) => [\n        ...eds.filter((edge) => edge.target !== 'end'),\n        ...newEdges,\n      ]);\n\n      return updatedNodes;\n    });\n\n    setNodeCount(nodeCount + 1); // Increment node count\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n\n      {/* Add Node Button */}\n      <button\n        onClick={addNodeHandler}\n        style={{\n          position: 'absolute',\n          top: 10,\n          left: 10,\n          padding: '10px 20px',\n          background: '#007bff',\n          color: '#fff',\n          border: 'none',\n          borderRadius: 5,\n          cursor: 'pointer',\n        }}\n      >\n        Add Action Node\n      </button>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}