{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, Panel } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Handle, Position } from 'reactflow';\n// Firstly, we import all the necessary libraries and components needed for the project to work\n\n// Custom node types\n//here we define and design the nodes that will be used for the flow diagram\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  start: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#e6f7ff',\n      border: '1px solid #1890ff',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"source\",\n      style: {\n        background: '#1890ff',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"  Start Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this),\n  action: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f0f5ff',\n      border: '1px solid #597ef7',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"target\",\n      style: {\n        background: '#597ef7',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"source\",\n      style: {\n        background: '#597ef7',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"Action Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'Action'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this),\n  ifelse: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#fff7e6',\n      border: '1px solid #ffc53d',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"target\",\n      style: {\n        background: '#ffc53d',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"source\",\n      style: {\n        background: '#ffc53d',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"If / Else\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'If / Else'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this),\n  end: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f9f0ff',\n      border: '1px solid #9254de',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"target\",\n      style: {\n        background: '#9254de',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"End Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'END'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this)\n};\n\n//This is the initial edge that connects the start and end(LVL1)\nconst initialNodes = [{\n  id: 'start',\n  type: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start'\n  }\n}, {\n  id: 'end',\n  type: 'end',\n  position: {\n    x: 300,\n    y: 400\n  },\n  data: {\n    label: 'END'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep',\n  sourceHandle: 'source',\n  targetHandle: 'target'\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges] = useEdgesState(initialEdges); //2 default hooks\n  const [nodeCount, setNodeCount] = useState(1); // unique node IDs\n  const [selectedNode, setSelectedNode] = useState(null); //holds the ID of the selected node\n  const [showNodeMenu, setShowNodeMenu] = useState(false); //boolean value to track if the node menu is shown or not\n  const [menuPosition, setMenuPosition] = useState({\n    x: 0,\n    y: 0\n  }); //to track the position of the node menu\n  const [clickedEdgeId, setClickedEdgeId] = useState(null); //track the id of the edge selected \n  const [showNodeForm, setShowNodeForm] = useState(false); //boolean to track if node form is shown or not\n  const [nodeFormData, setNodeFormData] = useState({\n    name: '',\n    type: ''\n  }); //to track the data entered in the node form\n  const [branchCount, setBranchCount] = useState(1); //to track the number of the branches\n  const reactFlowWrapper = useRef(null); //for DOM reference\n\n  console.log('slec', selectedNode);\n\n  // Handle node click\n  const onNodeClick = (event, node) => {\n    setSelectedNode(node);\n    setNodeFormData({\n      id: node.id,\n      name: node.data.label,\n      type: node.type,\n      branches: node.data.branches || []\n    });\n    if (node.id === 'start' || node.id === 'end' || node.id.startsWith('action-') || node.id.startsWith('ifelse-') && !node.id.includes('branch') && !node.id.includes('action')) {\n      setShowNodeForm(true);\n    }\n  };\n\n  // Handle background click to close forms\n  const onPaneClick = () => {\n    setSelectedNode(null);\n    setShowNodeForm(false);\n    setShowNodeMenu(false);\n  };\n\n  // Handle edge click to show add node menu\n  const onEdgeClick = (event, edge) => {\n    setClickedEdgeId(edge.id);\n    setMenuPosition({\n      x: 150,\n      y: 100\n    });\n    setShowNodeMenu(true);\n  };\n\n  // // Custom edge changes handler to prevent automatic connections to end node\n  // const onCustomEdgesChange = (changes) => {\n  //   setEdges((eds) => {\n  //     // Apply the changes\n  //     let newEdges = [...eds];\n\n  //     for (const change of changes) {\n  //       if (change.type === 'add') {\n  //         // Check if this is an automatic connection to the end node from a branch action node\n  //         if (change.item.target === 'end' && (\n  //             // Prevent connections from branch actions to main end\n  //             (change.item.source.includes('-branch-') && change.item.source.includes('-action')) ||\n  //             // Prevent connections from else actions to main end\n  //             (change.item.source.includes('-else-action'))\n  //           )) {\n  //           // Skip this change - don't add this edge\n  //           continue;\n  //         }\n  //         newEdges.push(change.item);\n  //       } else if (change.type === 'remove') {\n  //         newEdges = newEdges.filter((edge) => edge.id !== change.id);\n  //       } else if (change.type === 'replace') {\n  //         newEdges = change.item;\n  //       }\n  //     }\n\n  //     return newEdges;\n  //   });\n  // };\n\n  // Add a new node between two existing nodes\n  const addNodeBetween = nodeType => {\n    if (!clickedEdgeId) return;\n    const edge = edges.find(e => e.id === clickedEdgeId);\n    if (!edge) return;\n    const sourceNode = nodes.find(node => node.id === edge.source);\n    const targetNode = nodes.find(node => node.id === edge.target);\n    if (!sourceNode || !targetNode) return;\n\n    // Calculate position for the new node\n    const newNodePosition = {\n      x: (sourceNode.position.x + targetNode.position.x) / 2,\n      y: (sourceNode.position.y + targetNode.position.y) / 2\n    };\n    const newNodeId = `${nodeType}-${nodeCount}`;\n    let newNode = {\n      id: newNodeId,\n      type: nodeType,\n      position: newNodePosition,\n      data: {\n        label: nodeType === 'action' ? 'Action Node' : 'If / Else'\n      }\n    };\n\n    // If it's an if/else node, add default branches\n    if (nodeType === 'ifelse') {\n      newNode.data.branches = [{\n        id: 'branch-1',\n        name: 'Branch #1'\n      }];\n\n      // Create action nodes for each branch\n      const actionNodes = [{\n        id: `${newNodeId}-branch-1-action`,\n        type: 'action',\n        position: {\n          x: newNodePosition.x - 150,\n          y: newNodePosition.y + 100\n        },\n        data: {\n          label: 'Branch #1'\n        }\n      }, {\n        id: `${newNodeId}-else-action`,\n        type: 'action',\n        position: {\n          x: newNodePosition.x,\n          y: newNodePosition.y + 100\n        },\n        data: {\n          label: 'Else'\n        }\n      }];\n\n      // Create an end node for the else branch\n      const elseEndNode = {\n        id: `${newNodeId}-else-end`,\n        type: 'end',\n        position: {\n          x: newNodePosition.x,\n          y: newNodePosition.y + 300\n        },\n        data: {\n          label: 'END'\n        }\n      };\n\n      // Create branch edges\n      const branchEdges = [\n      // Connect if/else directly to actions\n      {\n        id: `${newNodeId}-to-branch-1-action`,\n        source: newNodeId,\n        target: `${newNodeId}-branch-1-action`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      }, {\n        id: `${newNodeId}-to-else-action`,\n        source: newNodeId,\n        target: `${newNodeId}-else-action`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      },\n      // Connect branch #1 action to target\n      {\n        id: `${newNodeId}-branch-1-action-to-target`,\n        source: `${newNodeId}-branch-1-action`,\n        target: edge.target,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      },\n      // Connect else action to its own end node\n      {\n        id: `${newNodeId}-else-action-to-end`,\n        source: `${newNodeId}-else-action`,\n        target: `${newNodeId}-else-end`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      }];\n\n      // Add all nodes and edges\n      setNodes(nds => [...nds, newNode, ...actionNodes, elseEndNode]);\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n\n        // Add new edges\n        return [...filteredEdges, {\n          id: `${edge.source}-${newNodeId}`,\n          source: edge.source,\n          target: newNodeId,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target'\n        }, ...branchEdges];\n      });\n    } else {\n      // For action nodes\n      setNodes(nds => [...nds, newNode]);\n\n      // Update edges\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n\n        // Add new edges\n        return [...filteredEdges, {\n          id: `${edge.source}-${newNodeId}`,\n          source: edge.source,\n          target: newNodeId,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target'\n        }, {\n          id: `${newNodeId}-${edge.target}`,\n          source: newNodeId,\n          target: edge.target,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target'\n        }];\n      });\n    }\n    setNodeCount(nodeCount + 1);\n    setShowNodeMenu(false);\n  };\n\n  // Add a new branch to an if/else node\n  const addBranch = () => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    const newBranchId = `branch-${nodeFormData.branches.length + 1}`;\n    const newBranch = {\n      id: newBranchId,\n      name: `Branch #${nodeFormData.branches.length + 1}`\n    };\n    setNodeFormData({\n      ...nodeFormData,\n      branches: [...nodeFormData.branches, newBranch]\n    });\n\n    // Get the if/else node position\n    const ifElseNode = nodes.find(node => node.id === selectedNode.id);\n    if (!ifElseNode) return;\n\n    // Calculate position for the new branch action node\n    const branchActionPosition = {\n      x: ifElseNode.position.x - 150 + nodeFormData.branches.length * 50,\n      y: ifElseNode.position.y + 100\n    };\n\n    // Calculate position for the new branch end node\n    const branchEndPosition = {\n      x: branchActionPosition.x,\n      y: branchActionPosition.y + 200\n    };\n\n    // Create action node for the new branch\n    const branchActionNode = {\n      id: `${selectedNode.id}-${newBranchId}-action`,\n      type: 'action',\n      position: branchActionPosition,\n      data: {\n        label: `${newBranch.name}`\n      }\n    };\n\n    // Create end node for the new branch\n    const branchEndNode = {\n      id: `${selectedNode.id}-${newBranchId}-end`,\n      type: 'end',\n      position: branchEndPosition,\n      data: {\n        label: 'END'\n      }\n    };\n\n    // Add the new nodes\n    setNodes(nds => [...nds, branchActionNode, branchEndNode]);\n\n    // Create edges to connect the if/else node to the new action node and the action node to the end node\n    const newEdges = [{\n      id: `${selectedNode.id}-to-${newBranchId}-action`,\n      source: selectedNode.id,\n      target: branchActionNode.id,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    }, {\n      id: `${branchActionNode.id}-to-end`,\n      source: branchActionNode.id,\n      target: branchEndNode.id,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    }];\n\n    // Add the new edges\n    setEdges(eds => [...eds, ...newEdges]);\n    setBranchCount(branchCount + 1);\n  };\n\n  // Remove a branch from an if/else node\n  const removeBranch = branchId => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n\n    // Update form data by removing the branch\n    setNodeFormData(prevData => ({\n      ...prevData,\n      branches: prevData.branches.filter(branch => branch.id !== branchId)\n    }));\n\n    // Find the action node and end node associated with this branch\n    const branchActionNodeId = `${selectedNode.id}-${branchId}-action`;\n    const branchEndNodeId = `${selectedNode.id}-${branchId}-end`;\n\n    // Remove the action and end nodes for the branch\n    setNodes(nds => nds.filter(node => node.id !== branchActionNodeId && node.id !== branchEndNodeId));\n\n    // Remove edges connected to the branch's action and end nodes\n    setEdges(eds => eds.filter(edge => edge.source !== branchActionNodeId && edge.target !== branchActionNodeId && edge.source !== branchEndNodeId && edge.target !== branchEndNodeId));\n\n    // Ensure remaining branches are still connected to the END node\n    const remainingBranches = nodeFormData.branches.filter(branch => branch.id !== branchId);\n    if (remainingBranches.length === 0) {\n      // If no branches remain, connect the If/Else node directly to the END node\n      setEdges(eds => [...eds, {\n        id: `${selectedNode.id}-to-end`,\n        source: selectedNode.id,\n        target: 'end',\n        type: 'smoothstep'\n      }]);\n    }\n  };\n\n  // Update branch name\n  const updateBranchName = (branchId, newName) => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    setNodeFormData({\n      ...nodeFormData,\n      branches: nodeFormData.branches.map(branch => branch.id === branchId ? {\n        ...branch,\n        name: newName\n      } : branch)\n    });\n\n    // Update the label of the corresponding action node\n    setNodes(nds => nds.map(node => {\n      if (node.id === `${selectedNode.id}-${branchId}-action`) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            label: newName // Update the label to the new branch name\n          }\n        };\n      }\n      return node;\n    }));\n  };\n\n  // Handle form submission for node editing\n  const handleNodeFormSubmit = e => {\n    e.preventDefault();\n    if (!selectedNode) return;\n\n    // Update the selected node's data with the updated branch names\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNode.id) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            label: nodeFormData.name,\n            branches: nodeFormData.branches // Preserve updated branch names\n          }\n        };\n      }\n\n      // Update branch action nodes with the new branch names\n      if (node.type === 'action' && node.id.includes(`${selectedNode.id}-branch-`)) {\n        const branchId = node.id.split('-branch-')[1].split('-action')[0];\n        const matchingBranch = nodeFormData.branches.find(b => b.id === `branch-${branchId}`);\n        if (matchingBranch) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: matchingBranch.name // Update the label to the branch name\n            }\n          };\n        }\n      }\n      return node;\n    }));\n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n\n  // Handle node deletion\n  const deleteNode = () => {\n    if (!selectedNode || selectedNode.id === 'start' || selectedNode.id === 'end') return;\n\n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(edge => edge.target === selectedNode.id);\n    const outgoingEdges = edges.filter(edge => edge.source === selectedNode.id);\n\n    // For if/else nodes, we need to handle differently\n    if (selectedNode.type === 'ifelse') {\n      // Find all related nodes (branch nodes, action nodes, end nodes)\n      const relatedNodes = nodes.filter(node => node.id.includes(selectedNode.id) || node.id.includes('branch') && node.id.includes(selectedNode.id.split('-')[1]) || node.id.includes(`${selectedNode.id}-else-end`));\n      const relatedNodeIds = relatedNodes.map(node => node.id);\n\n      // Find all edges connected to related nodes\n      const relatedEdges = edges.filter(edge => relatedNodeIds.includes(edge.source) || relatedNodeIds.includes(edge.target) || edge.source === selectedNode.id || edge.target === selectedNode.id);\n\n      // Remove the if/else node and all related nodes\n      setNodes(nds => nds.filter(node => node.id !== selectedNode.id && !relatedNodeIds.includes(node.id)));\n\n      // Remove all edges connected to this node and related nodes\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => !relatedEdges.some(re => re.id === edge.id));\n\n        // Connect the incoming node to the next node or end\n        if (incomingEdges.length > 0) {\n          // Connect the incoming node directly to the end node\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else {\n          // If no incoming edges (unlikely), ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => edge.source === 'start' && edge.target === 'end');\n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target'\n            });\n          }\n        }\n        return filteredEdges;\n      });\n    } else {\n      // For regular action nodes\n      // Remove just this node\n      setNodes(nds => nds.filter(node => node.id !== selectedNode.id));\n\n      // Remove edges connected to this node and reconnect\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => edge.source !== selectedNode.id && edge.target !== selectedNode.id);\n\n        // If there were both incoming and outgoing edges, connect them\n        if (incomingEdges.length > 0 && outgoingEdges.length > 0) {\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-${outgoingEdges[0].target}`,\n            source: incomingEdges[0].source,\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else if (incomingEdges.length > 0) {\n          // If only incoming edges, connect to end\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else if (outgoingEdges.length > 0) {\n          // If only outgoing edges, connect start to the target\n          filteredEdges.push({\n            id: `start-${outgoingEdges[0].target}`,\n            source: 'start',\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else {\n          // If no edges at all, ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => edge.source === 'start' && edge.target === 'end');\n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target'\n            });\n          }\n        }\n        return filteredEdges;\n      });\n    }\n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onCustomEdgesChange,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      onPaneClick: onPaneClick,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Panel, {\n        position: \"top-left\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 7\n    }, this), showNodeMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: `${menuPosition.y}px`,\n        left: `${menuPosition.x}px`,\n        backgroundColor: 'white',\n        padding: '10px',\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n        zIndex: 1000,\n        transform: 'translate(-50%, -50%)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px',\n          fontWeight: 'bold'\n        },\n        children: \"Add Node:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNodeBetween('action'),\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#1890ff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Action Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNodeBetween('ifelse'),\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#ffc53d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"If / Else Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 9\n    }, this), showNodeForm && selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n        zIndex: 1000,\n        transform: 'translate(-50%, -50%)',\n        minWidth: '300px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: 0\n        },\n        children: \"Edit Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNodeFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginBottom: '5px'\n            },\n            children: \"Node Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: nodeFormData.name,\n            onChange: e => setNodeFormData({\n              ...nodeFormData,\n              name: e.target.value\n            }),\n            style: {\n              width: '100%',\n              padding: '8px',\n              borderRadius: '4px',\n              border: '1px solidrgb(7, 7, 7)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 13\n        }, this), selectedNode.type === 'ifelse' && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginBottom: '5px'\n            },\n            children: \"Branches:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 17\n          }, this), nodeFormData.branches.map((branch, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: '5px',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: branch.name,\n              onChange: e => updateBranchName(branch.id, e.target.value),\n              style: {\n                flex: 1,\n                padding: '8px',\n                borderRadius: '4px',\n                border: '1px solid #d9d9d9',\n                marginRight: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 21\n            }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeBranch(branch.id),\n              style: {\n                padding: '8px',\n                backgroundColor: '#ff4d4f',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 842,\n              columnNumber: 23\n            }, this)]\n          }, branch.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: addBranch,\n            style: {\n              padding: '8px',\n              backgroundColor: '#52c41a',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              marginTop: '5px'\n            },\n            children: \"Add Branch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            style: {\n              padding: '10px',\n              backgroundColor: '#1890ff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: deleteNode,\n            style: {\n              padding: '10px',\n              backgroundColor: '#ff4d4f',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => {\n              setShowNodeForm(false);\n              setSelectedNode(null);\n            },\n            style: {\n              padding: '10px',\n              backgroundColor: '#d9d9d9',\n              color: 'black',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 877,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 722,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RbYbP2wS1IM1++YGQPrmI5jWmhU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","Panel","Handle","Position","jsxDEV","_jsxDEV","nodeTypes","start","data","id","style","padding","borderRadius","background","border","width","position","children","type","Bottom","height","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","marginBottom","fontWeight","label","action","Top","ifelse","end","initialNodes","x","y","initialEdges","source","target","sourceHandle","targetHandle","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","nodeCount","setNodeCount","selectedNode","setSelectedNode","showNodeMenu","setShowNodeMenu","menuPosition","setMenuPosition","clickedEdgeId","setClickedEdgeId","showNodeForm","setShowNodeForm","nodeFormData","setNodeFormData","name","branchCount","setBranchCount","reactFlowWrapper","console","log","onNodeClick","event","node","branches","startsWith","includes","onPaneClick","onEdgeClick","edge","addNodeBetween","nodeType","find","e","sourceNode","targetNode","newNodePosition","newNodeId","newNode","actionNodes","elseEndNode","branchEdges","nds","eds","filteredEdges","filter","addBranch","newBranchId","length","newBranch","ifElseNode","branchActionPosition","branchEndPosition","branchActionNode","branchEndNode","newEdges","removeBranch","branchId","prevData","branch","branchActionNodeId","branchEndNodeId","remainingBranches","updateBranchName","newName","map","handleNodeFormSubmit","preventDefault","split","matchingBranch","b","deleteNode","incomingEdges","outgoingEdges","relatedNodes","relatedNodeIds","relatedEdges","some","re","push","hasStartToEndEdge","ref","onEdgesChange","onCustomEdgesChange","fitView","variant","gap","size","top","left","backgroundColor","boxShadow","zIndex","transform","onClick","color","cursor","minWidth","marginTop","onSubmit","value","onChange","index","flex","marginRight","justifyContent","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  Panel,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Handle, Position } from 'reactflow';\n// Firstly, we import all the necessary libraries and components needed for the project to work\n\n// Custom node types\n//here we define and design the nodes that will be used for the flow diagram\nconst nodeTypes = {\n  start: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#e6f7ff',\n      border: '1px solid #1890ff',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"source\"\n        style={{ background: '#1890ff', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        <div style={{ fontWeight: 'bold' }}>  Start Node</div>\n      </div>\n      <div>{data.label || 'Start'}</div>\n    </div>\n  ),\n  action: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f0f5ff',\n      border: '1px solid #597ef7',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id=\"target\"\n        style={{ background: '#597ef7', width: '10px', height: '10px' }}\n      />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"source\"\n        style={{ background: '#597ef7', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        \n        <div style={{ fontWeight: 'bold' }}>Action Node</div>\n      </div>\n      <div>{data.label || 'Action'}</div>\n    </div>\n  ),\n  ifelse: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#fff7e6',\n      border: '1px solid #ffc53d',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id=\"target\"\n        style={{ background: '#ffc53d', width: '10px', height: '10px' }}\n      />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"source\"\n        style={{ background: '#ffc53d', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n\n        <div style={{ fontWeight: 'bold' }}>If / Else</div>\n      </div>\n      <div>{data.label || 'If / Else'}</div>\n    </div>\n  ),\n  end: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f9f0ff',\n      border: '1px solid #9254de',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id=\"target\"\n        style={{ background: '#9254de', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        <div style={{ fontWeight: 'bold' }}>End Node</div>\n      </div>\n      <div>{data.label || 'END'}</div>\n    </div>\n  ),\n};\n\n//This is the initial edge that connects the start and end(LVL1)\nconst initialNodes = [\n  {\n    id: 'start',\n    type: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start' },\n  },\n  {\n    id: 'end',\n    type: 'end',\n    position: { x: 300, y: 400 },\n    data: { label: 'END' },\n  },\n];\n\nconst initialEdges = [\n  { \n    id: 'start->end', \n    source: 'start', \n    target: 'end', \n    type: 'smoothstep',\n    sourceHandle: 'source',\n    targetHandle: 'target'\n  },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges,] = useEdgesState(initialEdges); //2 default hooks\n  const [nodeCount, setNodeCount] = useState(1); // unique node IDs\n  const [selectedNode, setSelectedNode] = useState(null); //holds the ID of the selected node\n  const [showNodeMenu, setShowNodeMenu] = useState(false); //boolean value to track if the node menu is shown or not\n  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 }); //to track the position of the node menu\n  const [clickedEdgeId, setClickedEdgeId] = useState(null); //track the id of the edge selected \n  const [showNodeForm, setShowNodeForm] = useState(false); //boolean to track if node form is shown or not\n  const [nodeFormData, setNodeFormData] = useState({ name: '', type: '' }); //to track the data entered in the node form\n  const [branchCount, setBranchCount] = useState(1); //to track the number of the branches\n  const reactFlowWrapper = useRef(null); //for DOM reference\n\n  console.log('slec',selectedNode)\n\n  // Handle node click\n  const onNodeClick = (event, node) => {\n    setSelectedNode(node);\n    setNodeFormData({\n      id: node.id,\n      name: node.data.label,\n      type: node.type,\n      branches: node.data.branches || []\n    });\n    if (\n      node.id === 'start' || \n      node.id === 'end' || \n      node.id.startsWith('action-') || \n      (node.id.startsWith('ifelse-') && !node.id.includes('branch') && !node.id.includes('action'))\n  ) {\n      setShowNodeForm(true);\n  }\n  };\n\n  // Handle background click to close forms\n  const onPaneClick = () => {\n    setSelectedNode(null);\n    setShowNodeForm(false);\n    setShowNodeMenu(false);\n  };\n\n  // Handle edge click to show add node menu\n  const onEdgeClick = (event, edge) => {\n    setClickedEdgeId(edge.id);\n    setMenuPosition({ x: 150, y: 100 });\n    setShowNodeMenu(true);\n  };\n\n  // // Custom edge changes handler to prevent automatic connections to end node\n  // const onCustomEdgesChange = (changes) => {\n  //   setEdges((eds) => {\n  //     // Apply the changes\n  //     let newEdges = [...eds];\n      \n  //     for (const change of changes) {\n  //       if (change.type === 'add') {\n  //         // Check if this is an automatic connection to the end node from a branch action node\n  //         if (change.item.target === 'end' && (\n  //             // Prevent connections from branch actions to main end\n  //             (change.item.source.includes('-branch-') && change.item.source.includes('-action')) ||\n  //             // Prevent connections from else actions to main end\n  //             (change.item.source.includes('-else-action'))\n  //           )) {\n  //           // Skip this change - don't add this edge\n  //           continue;\n  //         }\n  //         newEdges.push(change.item);\n  //       } else if (change.type === 'remove') {\n  //         newEdges = newEdges.filter((edge) => edge.id !== change.id);\n  //       } else if (change.type === 'replace') {\n  //         newEdges = change.item;\n  //       }\n  //     }\n      \n  //     return newEdges;\n  //   });\n  // };\n\n  // Add a new node between two existing nodes\n  const addNodeBetween = (nodeType) => {\n    if (!clickedEdgeId) return;\n    \n    const edge = edges.find(e => e.id === clickedEdgeId);\n    if (!edge) return;\n    \n    const sourceNode = nodes.find(node => node.id === edge.source);\n    const targetNode = nodes.find(node => node.id === edge.target);\n    \n    if (!sourceNode || !targetNode) return;\n    \n    // Calculate position for the new node\n    const newNodePosition = {\n      x: (sourceNode.position.x + targetNode.position.x) / 2,\n      y: (sourceNode.position.y + targetNode.position.y) / 2,\n    };\n    \n    const newNodeId = `${nodeType}-${nodeCount}`;\n    \n    let newNode = {\n      id: newNodeId,\n      type: nodeType,\n      position: newNodePosition,\n      data: { label: nodeType === 'action' ? 'Action Node' : 'If / Else' },\n    };\n    \n    // If it's an if/else node, add default branches\n    if (nodeType === 'ifelse') {\n      newNode.data.branches = [\n        { id: 'branch-1', name: 'Branch #1' }\n      ];\n      \n      // Create action nodes for each branch\n      const actionNodes = [\n        {\n          id: `${newNodeId}-branch-1-action`,\n          type: 'action',\n          position: { \n            x: newNodePosition.x - 150, \n            y: newNodePosition.y + 100 \n          },\n          data: { label: 'Branch #1' }, \n        },\n        {\n          id: `${newNodeId}-else-action`,\n          type: 'action',\n          position: { \n            x: newNodePosition.x, \n            y: newNodePosition.y + 100 \n          },\n          data: { label: 'Else' }, \n        }\n      ];\n      \n      // Create an end node for the else branch\n      const elseEndNode = {\n        id: `${newNodeId}-else-end`,\n        type: 'end',\n        position: { \n          x: newNodePosition.x, \n          y: newNodePosition.y + 300 \n        },\n        data: { label: 'END' },\n      };\n      \n      // Create branch edges\n      const branchEdges = [\n        // Connect if/else directly to actions\n        {\n          id: `${newNodeId}-to-branch-1-action`,\n          source: newNodeId,\n          target: `${newNodeId}-branch-1-action`,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        {\n          id: `${newNodeId}-to-else-action`,\n          source: newNodeId,\n          target: `${newNodeId}-else-action`,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        \n        // Connect branch #1 action to target\n        {\n          id: `${newNodeId}-branch-1-action-to-target`,\n          source: `${newNodeId}-branch-1-action`,\n          target: edge.target,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        \n        // Connect else action to its own end node\n        {\n          id: `${newNodeId}-else-action-to-end`,\n          source: `${newNodeId}-else-action`,\n          target: `${newNodeId}-else-end`,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        }\n      ];\n      \n      // Add all nodes and edges\n      setNodes(nds => [...nds, newNode, ...actionNodes, elseEndNode]);\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n        \n        // Add new edges\n        return [\n          ...filteredEdges,\n          {\n            id: `${edge.source}-${newNodeId}`,\n            source: edge.source,\n            target: newNodeId,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          },\n          ...branchEdges\n        ];\n      });\n    } else {\n      // For action nodes\n      setNodes(nds => [...nds, newNode]);\n      \n      // Update edges\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n        \n        // Add new edges\n        return [\n          ...filteredEdges,\n          {\n            id: `${edge.source}-${newNodeId}`,\n            source: edge.source,\n            target: newNodeId,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          },\n          {\n            id: `${newNodeId}-${edge.target}`,\n            source: newNodeId,\n            target: edge.target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          }\n        ];\n      });\n    }\n    \n    setNodeCount(nodeCount + 1);\n    setShowNodeMenu(false);\n  };\n\n  // Add a new branch to an if/else node\n  const addBranch = () => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    \n    const newBranchId = `branch-${nodeFormData.branches.length + 1}`;\n    const newBranch = { id: newBranchId, name: `Branch #${nodeFormData.branches.length + 1}` };\n    \n  \n    setNodeFormData({\n      ...nodeFormData,\n      branches: [...nodeFormData.branches, newBranch]\n    });\n    \n    // Get the if/else node position\n    const ifElseNode = nodes.find(node => node.id === selectedNode.id);\n    if (!ifElseNode) return;\n    \n    // Calculate position for the new branch action node\n    const branchActionPosition = {\n      x: ifElseNode.position.x - 150 + (nodeFormData.branches.length * 50), \n      y: ifElseNode.position.y + 100\n    };\n    \n    // Calculate position for the new branch end node\n    const branchEndPosition = {\n      x: branchActionPosition.x,\n      y: branchActionPosition.y + 200\n    };\n    \n    // Create action node for the new branch\n    const branchActionNode = {\n      id: `${selectedNode.id}-${newBranchId}-action`,\n      type: 'action',\n      position: branchActionPosition,\n      data: { label: `${newBranch.name}` },\n    };\n    \n    // Create end node for the new branch\n    const branchEndNode = {\n      id: `${selectedNode.id}-${newBranchId}-end`,\n      type: 'end',\n      position: branchEndPosition,\n      data: { label: 'END' },\n    };\n    \n    // Add the new nodes\n    setNodes(nds => [...nds, branchActionNode, branchEndNode]);\n    \n    // Create edges to connect the if/else node to the new action node and the action node to the end node\n    const newEdges = [\n      {\n        id: `${selectedNode.id}-to-${newBranchId}-action`,\n        source: selectedNode.id,\n        target: branchActionNode.id,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target',\n      },\n      {\n        id: `${branchActionNode.id}-to-end`,\n        source: branchActionNode.id,\n        target: branchEndNode.id,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target',\n      }\n    ];\n    \n    // Add the new edges\n    setEdges(eds => [...eds, ...newEdges]);\n    \n    setBranchCount(branchCount + 1);\n  };\n\n  \n  // Remove a branch from an if/else node\n  const removeBranch = (branchId) => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n  \n    // Update form data by removing the branch\n    setNodeFormData((prevData) => ({\n      ...prevData,\n      branches: prevData.branches.filter((branch) => branch.id !== branchId),\n    }));\n  \n    // Find the action node and end node associated with this branch\n    const branchActionNodeId = `${selectedNode.id}-${branchId}-action`;\n    const branchEndNodeId = `${selectedNode.id}-${branchId}-end`;\n  \n    // Remove the action and end nodes for the branch\n    setNodes((nds) =>\n      nds.filter(\n        (node) =>\n          node.id !== branchActionNodeId && node.id !== branchEndNodeId\n      )\n    );\n  \n    // Remove edges connected to the branch's action and end nodes\n    setEdges((eds) =>\n      eds.filter(\n        (edge) =>\n          edge.source !== branchActionNodeId &&\n          edge.target !== branchActionNodeId &&\n          edge.source !== branchEndNodeId &&\n          edge.target !== branchEndNodeId\n      )\n    );\n  \n    // Ensure remaining branches are still connected to the END node\n    const remainingBranches = nodeFormData.branches.filter(\n      (branch) => branch.id !== branchId\n    );\n  \n    if (remainingBranches.length === 0) {\n      // If no branches remain, connect the If/Else node directly to the END node\n      setEdges((eds) => [\n        ...eds,\n        {\n          id: `${selectedNode.id}-to-end`,\n          source: selectedNode.id,\n          target: 'end',\n          type: 'smoothstep',\n        },\n      ]);\n    }\n  };\n\n  // Update branch name\n  const updateBranchName = (branchId, newName) => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n  \n    setNodeFormData({\n      ...nodeFormData,\n      branches: nodeFormData.branches.map(branch => \n        branch.id === branchId ? { ...branch, name: newName } : branch\n      )\n    });\n  \n    // Update the label of the corresponding action node\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === `${selectedNode.id}-${branchId}-action`) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: newName, // Update the label to the new branch name\n            },\n          };\n        }\n        return node;\n      })\n    );\n  };\n\n  // Handle form submission for node editing\n  const handleNodeFormSubmit = (e) => {\n    e.preventDefault();\n  \n    if (!selectedNode) return;\n  \n    // Update the selected node's data with the updated branch names\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === selectedNode.id) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: nodeFormData.name,\n              branches: nodeFormData.branches, // Preserve updated branch names\n            },\n          };\n        }\n  \n        // Update branch action nodes with the new branch names\n        if (node.type === 'action' && node.id.includes(`${selectedNode.id}-branch-`)) {\n          const branchId = node.id.split('-branch-')[1].split('-action')[0];\n          const matchingBranch = nodeFormData.branches.find((b) => b.id === `branch-${branchId}`);\n          if (matchingBranch) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                label: matchingBranch.name, // Update the label to the branch name\n              },\n            };\n          }\n        }\n  \n        return node;\n      })\n    );\n  \n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n\n  // Handle node deletion\n  const deleteNode = () => {\n    if (!selectedNode || selectedNode.id === 'start' || selectedNode.id === 'end') return;\n    \n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(edge => edge.target === selectedNode.id);\n    const outgoingEdges = edges.filter(edge => edge.source === selectedNode.id);\n    \n    // For if/else nodes, we need to handle differently\n    if (selectedNode.type === 'ifelse') {\n      // Find all related nodes (branch nodes, action nodes, end nodes)\n      const relatedNodes = nodes.filter(node => \n        node.id.includes(selectedNode.id) || \n        (node.id.includes('branch') && node.id.includes(selectedNode.id.split('-')[1])) ||\n        node.id.includes(`${selectedNode.id}-else-end`)\n      );\n      \n      const relatedNodeIds = relatedNodes.map(node => node.id);\n      \n      // Find all edges connected to related nodes\n      const relatedEdges = edges.filter(edge => \n        relatedNodeIds.includes(edge.source) || \n        relatedNodeIds.includes(edge.target) ||\n        edge.source === selectedNode.id ||\n        edge.target === selectedNode.id\n      );\n      \n      // Remove the if/else node and all related nodes\n      setNodes(nds => nds.filter(node => \n        node.id !== selectedNode.id && \n        !relatedNodeIds.includes(node.id)\n      ));\n      \n      // Remove all edges connected to this node and related nodes\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => \n          !relatedEdges.some(re => re.id === edge.id)\n        );\n        \n        // Connect the incoming node to the next node or end\n        if (incomingEdges.length > 0) {\n          // Connect the incoming node directly to the end node\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else {\n          // If no incoming edges (unlikely), ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => \n            edge.source === 'start' && edge.target === 'end'\n          );\n          \n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target',\n            });\n          }\n        }\n        \n        return filteredEdges;\n      });\n    } else {\n      // For regular action nodes\n      // Remove just this node\n      setNodes(nds => nds.filter(node => node.id !== selectedNode.id));\n      \n      // Remove edges connected to this node and reconnect\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => \n          edge.source !== selectedNode.id && \n          edge.target !== selectedNode.id\n        );\n        \n        // If there were both incoming and outgoing edges, connect them\n        if (incomingEdges.length > 0 && outgoingEdges.length > 0) {\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-${outgoingEdges[0].target}`,\n            source: incomingEdges[0].source,\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else if (incomingEdges.length > 0) {\n          // If only incoming edges, connect to end\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else if (outgoingEdges.length > 0) {\n          // If only outgoing edges, connect start to the target\n          filteredEdges.push({\n            id: `start-${outgoingEdges[0].target}`,\n            source: 'start',\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else {\n          // If no edges at all, ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => \n            edge.source === 'start' && edge.target === 'end'\n          );\n          \n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target',\n            });\n          }\n        }\n        \n        return filteredEdges;\n      });\n    }\n    \n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }} ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onCustomEdgesChange}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        onPaneClick={onPaneClick}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n        \n        <Panel position=\"top-left\">\n          <div style={{ display: 'flex', gap: '10px' }}>\n            {/* Add Node button removed as requested */}\n          </div>\n        </Panel>\n      </ReactFlow>\n\n      {/* Node Selection Menu */}\n      {showNodeMenu && (\n        <div\n          style={{\n            position: 'absolute',\n            top: `${menuPosition.y}px`,\n            left: `${menuPosition.x}px`,\n            backgroundColor: 'white',\n            padding: '10px',\n            borderRadius: '5px',\n            boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n            zIndex: 1000,\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>Add Node:</div>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <button\n              onClick={() => addNodeBetween('action')}\n              style={{\n                padding: '8px 12px',\n                backgroundColor: '#1890ff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Action Node\n            </button>\n            <button\n              onClick={() => addNodeBetween('ifelse')}\n              style={{\n                padding: '8px 12px',\n                backgroundColor: '#ffc53d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              If / Else Node\n            </button>\n          </div>\n        </div>\n      )}\n      {/* Node Form */}\n      {showNodeForm && selectedNode && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            backgroundColor: 'white',\n            padding: '20px',\n            borderRadius: '5px',\n            boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n            zIndex: 1000,\n            transform: 'translate(-50%, -50%)',\n            minWidth: '300px',\n          }}\n        >\n          <h3 style={{ marginTop: 0 }}>Edit Node</h3>\n          <form onSubmit={handleNodeFormSubmit}>\n            <div style={{ marginBottom: '15px' }}>\n              <label style={{ display: 'block', marginBottom: '5px' }}>Node Name:</label>\n              <input\n                type=\"text\"\n                value={nodeFormData.name}\n                onChange={(e) => setNodeFormData({ ...nodeFormData, name: e.target.value })}\n                style={{\n                  width: '100%',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  border: '1px solidrgb(7, 7, 7)',\n                }}\n              />\n            </div>\n            \n            {selectedNode.type === 'ifelse' && (\n              <div style={{ marginBottom: '15px' }}>\n                <label style={{ display: 'block', marginBottom: '5px' }}>Branches:</label>\n                {nodeFormData.branches.map((branch, index) => (\n                  <div key={branch.id} style={{ display: 'flex', marginBottom: '5px', alignItems: 'center' }}>\n                    <input\n                      type=\"text\"\n                      value={branch.name}\n                      onChange={(e) => updateBranchName(branch.id, e.target.value)}\n                      style={{\n                        flex: 1,\n                        padding: '8px',\n                        borderRadius: '4px',\n                        border: '1px solid #d9d9d9',\n                        marginRight: '5px',\n                      }}\n                    />\n                    {index > 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => removeBranch(branch.id)}\n                        style={{\n                          padding: '8px',\n                          backgroundColor: '#ff4d4f',\n                          color: 'white',\n                          border: 'none',\n                          borderRadius: '4px',\n                          cursor: 'pointer',\n                        }}\n                      >\n                        Remove\n                      </button>\n                    )}\n                  </div>\n                ))}\n                <button\n                  type=\"button\"\n                  onClick={addBranch}\n                  style={{\n                    padding: '8px',\n                    backgroundColor: '#52c41a',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    marginTop: '5px',\n                  }}\n                >\n                  Add Branch\n                </button>\n              </div>\n            )}\n            \n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <button\n                type=\"submit\"\n                style={{\n                  padding: '10px',\n                  backgroundColor: '#1890ff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                }}\n              >\n                Save\n              </button>\n              <button\n                type=\"button\"\n                onClick={deleteNode}\n                style={{\n                  padding: '10px',\n                  backgroundColor: '#ff4d4f',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                }}\n              >\n                Delete Node\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setShowNodeForm(false);\n                  setSelectedNode(null);\n                }}\n                style={{\n                  padding: '10px',\n                  backgroundColor: '#d9d9d9',\n                  color: 'black',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                }}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}