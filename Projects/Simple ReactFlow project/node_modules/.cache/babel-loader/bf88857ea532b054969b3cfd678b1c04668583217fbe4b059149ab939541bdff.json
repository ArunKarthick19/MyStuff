{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 300,\n    y: 400\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep'\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const lastNode = nodes[nodes.length - 1]; // Get the last node\n  const [nodeCount, setNodeCount] = useState(1); // To generate unique node IDs\n\n  const addNodeHandler = () => {\n    const newNodeId = `node-${nodeCount}`;\n    const newNodePosition = {\n      x: 300,\n      y: 100 + nodeCount * 100\n    };\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: {\n        label: `Node ${nodeCount}`\n      },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000'\n      }\n    };\n\n    // Log the x and y position of the new node to the console\n    console.log(`New Node Created: ${newNodeId}`);\n    console.log(`Position: x = ${newNodePosition.x}, y = ${newNodePosition.y}`);\n\n    // Add the new node to the state\n    setNodes(nds => [...nds, newNode]);\n\n    // Create new edges\n    const newEdges = [\n    // Connect the start to the new node\n    {\n      id: `e-start-${newNodeId}`,\n      source: 'start',\n      target: newNodeId,\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#1890ff',\n        strokeWidth: 2\n      }\n    },\n    // Connect the new node to the end node\n    {\n      id: `e-${newNodeId}-end`,\n      source: newNodeId,\n      target: 'end',\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#1890ff',\n        strokeWidth: 2\n      }\n    }];\n\n    // If there's already a previous node, connect the new node to it\n    if (nodeCount > 0) {\n      const prevNodeId = `node-${nodeCount - 1}`;\n      newEdges.push({\n        id: `e-${prevNodeId}-${newNodeId}`,\n        source: prevNodeId,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: {\n          stroke: '#1890ff',\n          strokeWidth: 2\n        }\n      });\n    }\n\n    // Update edges state\n    setEdges(eds => [...eds, ...newEdges]);\n\n    // Increment node count\n    setNodeCount(nodeCount + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNodeHandler,\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '20px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNodeHandler,\n      style: {\n        position: 'absolute',\n        top: `${lastNode.position.y + 50}px`,\n        // Position below the last node\n        left: `${lastNode.position.x + 50}px`,\n        // Position to the right of the last node\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ftZcKc2+1DyTjXBEiGg7Yt1pANM=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","color","border","initialEdges","source","target","type","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","lastNode","length","nodeCount","setNodeCount","addNodeHandler","newNodeId","newNodePosition","newNode","console","log","nds","newEdges","animated","stroke","strokeWidth","prevNodeId","push","eds","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","variant","gap","size","onClick","top","left","backgroundColor","cursor","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n  {\n    id: 'end',\n    position: { x: 300, y: 400 },\n    data: { label: 'End Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n];\n\nconst initialEdges = [\n  { id: 'start->end', source: 'start', target: 'end', type: 'smoothstep' },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const lastNode = nodes[nodes.length - 1];  // Get the last node\n  const [nodeCount, setNodeCount] = useState(1); // To generate unique node IDs\n\n  const addNodeHandler = () => {\n    const newNodeId = `node-${nodeCount}`;\n    const newNodePosition = { x: 300, y: 100 + nodeCount * 100 };\n\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: { label: `Node ${nodeCount}` },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000',\n      },\n    };\n\n    // Log the x and y position of the new node to the console\n    console.log(`New Node Created: ${newNodeId}`);\n    console.log(`Position: x = ${newNodePosition.x}, y = ${newNodePosition.y}`);\n\n    // Add the new node to the state\n    setNodes((nds) => [...nds, newNode]);\n\n    // Create new edges\n    const newEdges = [\n      // Connect the start to the new node\n      {\n        id: `e-start-${newNodeId}`,\n        source: 'start',\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      },\n      // Connect the new node to the end node\n      {\n        id: `e-${newNodeId}-end`,\n        source: newNodeId,\n        target: 'end',\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      },\n    ];\n\n    // If there's already a previous node, connect the new node to it\n    if (nodeCount > 0) {\n      const prevNodeId = `node-${nodeCount - 1}`;\n      newEdges.push({\n        id: `e-${prevNodeId}-${newNodeId}`,\n        source: prevNodeId,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      });\n    }\n\n    // Update edges state\n    setEdges((eds) => [...eds, ...newEdges]);\n\n    // Increment node count\n    setNodeCount(nodeCount + 1);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n\n      {/* Add Node Button */}\n      <button\n        onClick={addNodeHandler}\n        style={{\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          padding: '10px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n        }}\n      >\n        Add Node\n      </button>\n\n      <button\n  onClick={addNodeHandler}\n  style={{\n    position: 'absolute',\n    top: `${lastNode.position.y + 50}px`, // Position below the last node\n    left: `${lastNode.position.x + 50}px`, // Position to the right of the last node\n    padding: '10px',\n    backgroundColor: '#007bff',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n  }}\n>\n  Add Node\n</button>\n\n\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}