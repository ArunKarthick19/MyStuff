{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { ReactFlow, addEdge, useNodesState, useEdgesState } from '@xyflow/react';\nimport CustomEdge from './CustomEdge';\nimport '@xyflow/react/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'a',\n  position: {\n    x: 0,\n    y: 0\n  },\n  data: {\n    label: 'Node A'\n  }\n}, {\n  id: 'b',\n  position: {\n    x: 0,\n    y: 100\n  },\n  data: {\n    label: 'Node B'\n  }\n}, {\n  id: 'c',\n  position: {\n    x: 0,\n    y: 200\n  },\n  data: {\n    label: 'Node C'\n  }\n}];\nconst initialEdges = [{\n  id: 'a->b',\n  type: 'custom-edge',\n  source: 'a',\n  target: 'b'\n}, {\n  id: 'b->c',\n  type: 'custom-edge',\n  source: 'b',\n  target: 'c'\n}];\nconst edgeTypes = {\n  'custom-edge': CustomEdge\n};\nfunction Flow() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback(connection => {\n    const edge = {\n      ...connection,\n      type: 'custom-edge'\n    };\n    setEdges(eds => addEdge(edge, eds));\n  }, [setEdges]);\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect,\n    edgeTypes: edgeTypes,\n    fitView: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Flow, \"mmoxFmHOvuuD77aIm5gUqDEdUKU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Flow;\nexport default Flow;\nvar _c;\n$RefreshReg$(_c, \"Flow\");","map":{"version":3,"names":["useCallback","ReactFlow","addEdge","useNodesState","useEdgesState","CustomEdge","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","initialEdges","type","source","target","edgeTypes","Flow","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","onConnect","connection","edge","eds","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import { useCallback } from 'react';\nimport {\n  ReactFlow,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n} from '@xyflow/react';\nimport CustomEdge from './CustomEdge';\n \nimport '@xyflow/react/dist/style.css';\n \nconst initialNodes = [\n  { id: 'a', position: { x: 0, y: 0 }, data: { label: 'Node A' } },\n  { id: 'b', position: { x: 0, y: 100 }, data: { label: 'Node B' } },\n  { id: 'c', position: { x: 0, y: 200 }, data: { label: 'Node C' } },\n];\n \nconst initialEdges = [\n  { id: 'a->b', type: 'custom-edge', source: 'a', target: 'b' },\n  { id: 'b->c', type: 'custom-edge', source: 'b', target: 'c' },\n];\n \nconst edgeTypes = {\n  'custom-edge': CustomEdge,\n};\n \nfunction Flow() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback(\n    (connection) => {\n      const edge = { ...connection, type: 'custom-edge' };\n      setEdges((eds) => addEdge(edge, eds));\n    },\n    [setEdges],\n  );\n \n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      edgeTypes={edgeTypes}\n      fitView\n    />\n  );\n}\n \nexport default Flow;"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SACEC,SAAS,EACTC,OAAO,EACPC,aAAa,EACbC,aAAa,QACR,eAAe;AACtB,OAAOC,UAAU,MAAM,cAAc;AAErC,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,GAAG;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAAEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAS;AAAE,CAAC,EAChE;EAAEL,EAAE,EAAE,GAAG;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAI,CAAC;EAAEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAS;AAAE,CAAC,EAClE;EAAEL,EAAE,EAAE,GAAG;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAI,CAAC;EAAEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAS;AAAE,CAAC,CACnE;AAED,MAAMC,YAAY,GAAG,CACnB;EAAEN,EAAE,EAAE,MAAM;EAAEO,IAAI,EAAE,aAAa;EAAEC,MAAM,EAAE,GAAG;EAAEC,MAAM,EAAE;AAAI,CAAC,EAC7D;EAAET,EAAE,EAAE,MAAM;EAAEO,IAAI,EAAE,aAAa;EAAEC,MAAM,EAAE,GAAG;EAAEC,MAAM,EAAE;AAAI,CAAC,CAC9D;AAED,MAAMC,SAAS,GAAG;EAChB,aAAa,EAAEd;AACjB,CAAC;AAED,SAASe,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGrB,aAAa,CAACK,YAAY,CAAC;EACpE,MAAM,CAACiB,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGvB,aAAa,CAACW,YAAY,CAAC;EACpE,MAAMa,SAAS,GAAG5B,WAAW,CAC1B6B,UAAU,IAAK;IACd,MAAMC,IAAI,GAAG;MAAE,GAAGD,UAAU;MAAEb,IAAI,EAAE;IAAc,CAAC;IACnDU,QAAQ,CAAEK,GAAG,IAAK7B,OAAO,CAAC4B,IAAI,EAAEC,GAAG,CAAC,CAAC;EACvC,CAAC,EACD,CAACL,QAAQ,CACX,CAAC;EAED,oBACEnB,OAAA,CAACN,SAAS;IACRqB,KAAK,EAAEA,KAAM;IACbG,KAAK,EAAEA,KAAM;IACbD,aAAa,EAAEA,aAAc;IAC7BG,aAAa,EAAEA,aAAc;IAC7BC,SAAS,EAAEA,SAAU;IACrBT,SAAS,EAAEA,SAAU;IACrBa,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEN;AAACf,EAAA,CAtBQD,IAAI;EAAA,QAC8BjB,aAAa,EACbC,aAAa;AAAA;AAAAiC,EAAA,GAF/CjB,IAAI;AAwBb,eAAeA,IAAI;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}