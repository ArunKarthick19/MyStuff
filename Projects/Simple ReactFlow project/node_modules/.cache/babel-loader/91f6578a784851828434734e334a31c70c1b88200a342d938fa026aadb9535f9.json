{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, Position } from 'react-flow-renderer';\nimport 'react-flow-renderer/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 250,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffcc00',\n    padding: 10,\n    borderRadius: 5\n  },\n  sourcePosition: Position.Bottom\n}, {\n  id: 'end',\n  position: {\n    x: 250,\n    y: 200\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#66ccff',\n    padding: 10,\n    borderRadius: 5\n  },\n  targetPosition: Position.Top\n}];\n\n// Create initial edge between start and end\nconst initialEdges = [{\n  id: 'e-initial',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep',\n  style: {\n    stroke: '#333',\n    strokeWidth: 2\n  }\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [edgeCount, setEdgeCount] = useState(1); // Start from 1 since we have an initial edge\n\n  // Function to add an intermediate node dynamically\n  const addEdgeHandler = () => {\n    // Create a new node that will sit on the path between start and end\n    const newNodeId = `node-${edgeCount}`;\n    const xPosition = 250 + (Math.random() * 100 - 50); // Random x offset for visual interest\n\n    // Calculate y position between start and end\n    const newNodeY = 50 + (200 - 50) * (edgeCount % 3 + 1) / 4;\n    const newNode = {\n      id: newNodeId,\n      position: {\n        x: xPosition,\n        y: newNodeY\n      },\n      data: {\n        label: `Node ${edgeCount}`\n      },\n      style: {\n        background: '#90EE90',\n        padding: 10,\n        borderRadius: 5\n      },\n      sourcePosition: Position.Bottom,\n      targetPosition: Position.Top\n    };\n\n    // Add the new node\n    setNodes(nds => [...nds, newNode]);\n\n    // Remove the direct connection between the previous nodes if it exists\n    const sourceNodeId = edgeCount === 1 ? 'start' : `node-${edgeCount - 1}`;\n    const filteredEdges = edges.filter(e => !(e.source === sourceNodeId && e.target === 'end'));\n\n    // Create new edges: from previous node to new node and from new node to end\n    const newEdges = [...filteredEdges, {\n      id: `e-${edgeCount}-a`,\n      source: sourceNodeId,\n      target: newNodeId,\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#ff6347',\n        strokeWidth: 2\n      }\n    }, {\n      id: `e-${edgeCount}-b`,\n      source: newNodeId,\n      target: 'end',\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#ff6347',\n        strokeWidth: 2\n      }\n    }];\n    setEdges(newEdges);\n    setEdgeCount(edgeCount + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addEdgeHandler,\n      style: {\n        position: 'absolute',\n        top: 10,\n        left: 10,\n        padding: '10px 20px',\n        background: '#007bff',\n        color: '#fff',\n        border: 'none',\n        borderRadius: 5,\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"b2WCbjS+mON7STA+u/+ZbIAhzTw=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","Position","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","sourcePosition","Bottom","targetPosition","Top","initialEdges","source","target","type","stroke","strokeWidth","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","edgeCount","setEdgeCount","addEdgeHandler","newNodeId","xPosition","Math","random","newNodeY","newNode","nds","sourceNodeId","filteredEdges","filter","e","newEdges","animated","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","variant","gap","size","onClick","top","left","color","border","cursor","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  Position,\n} from 'react-flow-renderer';\nimport 'react-flow-renderer/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 250, y: 50 },\n    data: { label: 'Start Node' },\n    style: { background: '#ffcc00', padding: 10, borderRadius: 5 },\n    sourcePosition: Position.Bottom,\n  },\n  {\n    id: 'end',\n    position: { x: 250, y: 200 },\n    data: { label: 'End Node' },\n    style: { background: '#66ccff', padding: 10, borderRadius: 5 },\n    targetPosition: Position.Top,\n  },\n];\n\n// Create initial edge between start and end\nconst initialEdges = [\n  {\n    id: 'e-initial',\n    source: 'start',\n    target: 'end',\n    type: 'smoothstep',\n    style: { stroke: '#333', strokeWidth: 2 },\n  },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [edgeCount, setEdgeCount] = useState(1); // Start from 1 since we have an initial edge\n\n  // Function to add an intermediate node dynamically\n  const addEdgeHandler = () => {\n    // Create a new node that will sit on the path between start and end\n    const newNodeId = `node-${edgeCount}`;\n    const xPosition = 250 + (Math.random() * 100 - 50); // Random x offset for visual interest\n    \n    // Calculate y position between start and end\n    const newNodeY = 50 + ((200 - 50) * (edgeCount % 3 + 1)) / 4;\n    \n    const newNode = {\n      id: newNodeId,\n      position: { x: xPosition, y: newNodeY },\n      data: { label: `Node ${edgeCount}` },\n      style: { background: '#90EE90', padding: 10, borderRadius: 5 },\n      sourcePosition: Position.Bottom,\n      targetPosition: Position.Top,\n    };\n\n    // Add the new node\n    setNodes((nds) => [...nds, newNode]);\n\n    // Remove the direct connection between the previous nodes if it exists\n    const sourceNodeId = edgeCount === 1 ? 'start' : `node-${edgeCount - 1}`;\n    const filteredEdges = edges.filter(\n      (e) => !(e.source === sourceNodeId && e.target === 'end')\n    );\n\n    // Create new edges: from previous node to new node and from new node to end\n    const newEdges = [\n      ...filteredEdges,\n      {\n        id: `e-${edgeCount}-a`,\n        source: sourceNodeId,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#ff6347', strokeWidth: 2 },\n      },\n      {\n        id: `e-${edgeCount}-b`,\n        source: newNodeId,\n        target: 'end',\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#ff6347', strokeWidth: 2 },\n      },\n    ];\n\n    setEdges(newEdges);\n    setEdgeCount(edgeCount + 1);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n      {/* Add Button */}\n      <button\n        onClick={addEdgeHandler}\n        style={{\n          position: 'absolute',\n          top: 10,\n          left: 10,\n          padding: '10px 20px',\n          background: '#007bff',\n          color: '#fff',\n          border: 'none',\n          borderRadius: 5,\n          cursor: 'pointer',\n        }}\n      >\n        Add Node\n      </button>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}