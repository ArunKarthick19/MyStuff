{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, Panel } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Handle, Position } from 'reactflow';\n// Firstly, we import all the necessary libraries and components needed for the project to work\n\n// Custom node types\n//here we define and desine the nodes that will be used for the flow diagram\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  start: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#e6f7ff',\n      border: '1px solid #1890ff',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"source\",\n      style: {\n        background: '#1890ff',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '0px',\n          height: '0px',\n          borderRadius: '50%',\n          background: '#e6f7ff',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #1890ff'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \" \\uD83D\\uDE80 Start Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this),\n  action: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f0f5ff',\n      border: '1px solid #597ef7',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"target\",\n      style: {\n        background: '#597ef7',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"source\",\n      style: {\n        background: '#597ef7',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '30px',\n          height: '30px',\n          borderRadius: '50%',\n          background: '#f0f5ff',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #597ef7'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"action\",\n          children: \"\\u2699\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"Action Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'Action'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this),\n  ifelse: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#fff7e6',\n      border: '1px solid #ffc53d',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"target\",\n      style: {\n        background: '#ffc53d',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Bottom,\n      id: \"source\",\n      style: {\n        background: '#ffc53d',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '30px',\n          height: '30px',\n          borderRadius: '50%',\n          background: '#fff7e6',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #ffc53d'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"if-else\",\n          children: \"\\uD83D\\uDD00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"If / Else\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'If / Else'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this),\n  end: ({\n    data,\n    id\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f9f0ff',\n      border: '1px solid #9254de',\n      width: '180px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Top,\n      id: \"target\",\n      style: {\n        background: '#9254de',\n        width: '10px',\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '30px',\n          height: '30px',\n          borderRadius: '50%',\n          background: '#f9f0ff',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #9254de'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"end\",\n          children: \"\\uD83C\\uDFC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: \"End Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label || 'END'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this)\n};\n\n//This is the initial edge that connects the start and end(LVL1)\nconst initialNodes = [{\n  id: 'start',\n  type: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start'\n  }\n}, {\n  id: 'end',\n  type: 'end',\n  position: {\n    x: 300,\n    y: 400\n  },\n  data: {\n    label: 'END'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep',\n  sourceHandle: 'source',\n  targetHandle: 'target'\n}];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges); //2 default hooks\n  const [nodeCount, setNodeCount] = useState(1); // unique node IDs\n  const [selectedNode, setSelectedNode] = useState(null); //holds the ID of the selected node\n  const [showNodeMenu, setShowNodeMenu] = useState(false); //boolean  value to track if the node menue id shown or node\n  const [menuPosition, setMenuPosition] = useState({\n    x: 0,\n    y: 0\n  }); //to track the position of the node menu\n  const [clickedEdgeId, setClickedEdgeId] = useState(null); //track the id of the edge selected \n  const [showNodeForm, setShowNodeForm] = useState(false); //boolean to track if node form is show or node\n  const [nodeFormData, setNodeFormData] = useState({\n    name: '',\n    type: ''\n  }); //to track the data entered in the node(while editing form?)\n  const [branchCount, setBranchCount] = useState(1); //to track the number of the branches\n  const [showAddNodeMenu, setShowAddNodeMenu] = useState(false); //boolean to track if AddNodeMenu is shown\n  const reactFlowWrapper = useRef(null); //for dom\n\n  // Handle node click\n  const onNodeClick = (event, node) => {\n    setSelectedNode(node);\n    setNodeFormData({\n      //to updates the nodeFormData of the node clicked\n      id: node.id,\n      name: node.data.label,\n      type: node.type,\n      branches: node.data.branches || []\n    });\n    setShowNodeForm(true); //to make the node form appear\n  };\n\n  // to handle background click to close forms\n  const onPaneClick = () => {\n    setSelectedNode(null);\n    setShowNodeForm(false);\n    setShowNodeMenu(false);\n    setShowAddNodeMenu(false);\n  };\n\n  // Handle edge click to show add node menu\n  const onEdgeClick = (event, edge) => {\n    setClickedEdgeId(edge.id);\n\n    // calc position for the node menu\n\n    const x = 100;\n    const y = (sourceNode.position.y + targetNode.position.y) / 2;\n    setMenuPosition({\n      x,\n      y\n    });\n    setShowNodeMenu(true);\n  };\n\n  // Add a new node between two existing nodes\n  const addNodeBetween = nodeType => {\n    if (!clickedEdgeId) return;\n    const edge = edges.find(e => e.id === clickedEdgeId);\n    if (!edge) return;\n    const sourceNode = nodes.find(node => node.id === edge.source);\n    const targetNode = nodes.find(node => node.id === edge.target);\n    if (!sourceNode || !targetNode) return;\n\n    // Calculate position for the new node\n    const newNodePosition = {\n      x: (sourceNode.position.x + targetNode.position.x) / 2,\n      y: (sourceNode.position.y + targetNode.position.y) / 2\n    };\n    const newNodeId = `${nodeType}-${nodeCount}`;\n    let newNode = {\n      id: newNodeId,\n      type: nodeType,\n      position: newNodePosition,\n      data: {\n        label: nodeType === 'action' ? 'Action Node' : 'If / Else'\n      }\n    };\n\n    // If it's an if/else node, add default branches\n    if (nodeType === 'ifelse') {\n      newNode.data.branches = [{\n        id: 'branch-1',\n        name: 'Branch #1'\n      }];\n\n      // Create action nodes for each branch\n      const actionNodes = [{\n        id: `${newNodeId}-branch-1-action`,\n        type: 'action',\n        position: {\n          x: newNodePosition.x - 150,\n          y: newNodePosition.y + 100\n        },\n        data: {\n          label: 'Branch #1 Action'\n        }\n      }, {\n        id: `${newNodeId}-else-action`,\n        type: 'action',\n        position: {\n          x: newNodePosition.x,\n          y: newNodePosition.y + 100\n        },\n        data: {\n          label: 'Else Action'\n        }\n      }];\n\n      // Create an end node for the else branch\n      const elseEndNode = {\n        id: `${newNodeId}-else-end`,\n        type: 'end',\n        position: {\n          x: newNodePosition.x,\n          y: newNodePosition.y + 300\n        },\n        data: {\n          label: 'END'\n        }\n      };\n\n      // Create branch edges\n      const branchEdges = [\n      // Connect if/else directly to actions\n      {\n        id: `${newNodeId}-to-branch-1-action`,\n        source: newNodeId,\n        target: `${newNodeId}-branch-1-action`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      }, {\n        id: `${newNodeId}-to-else-action`,\n        source: newNodeId,\n        target: `${newNodeId}-else-action`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      },\n      // Connect branch #1 action to target\n      {\n        id: `${newNodeId}-branch-1-action-to-target`,\n        source: `${newNodeId}-branch-1-action`,\n        target: edge.target,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      },\n      // Connect else action to its own end node\n      {\n        id: `${newNodeId}-else-action-to-end`,\n        source: `${newNodeId}-else-action`,\n        target: `${newNodeId}-else-end`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      }];\n\n      // Add all nodes and edges\n      setNodes(nds => [...nds, newNode, ...actionNodes, elseEndNode]);\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n\n        // Add new edges\n        return [...filteredEdges, {\n          id: `${edge.source}-${newNodeId}`,\n          source: edge.source,\n          target: newNodeId,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target'\n        }, ...branchEdges];\n      });\n    } else {\n      // For action nodes\n      setNodes(nds => [...nds, newNode]);\n\n      // Update edges\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n\n        // Add new edges\n        return [...filteredEdges, {\n          id: `${edge.source}-${newNodeId}`,\n          source: edge.source,\n          target: newNodeId,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target'\n        }, {\n          id: `${newNodeId}-${edge.target}`,\n          source: newNodeId,\n          target: edge.target,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target'\n        }];\n      });\n    }\n    setNodeCount(nodeCount + 1);\n    setShowNodeMenu(false);\n  };\n\n  // Show the Add Node menu\n  const showAddNodeMenuHandler = () => {\n    setMenuPosition({\n      x: 100,\n      y: 100\n    }); // Position near the Add Node button\n    setShowAddNodeMenu(true);\n  };\n\n  // Add a new action node directly from the Add Node button\n  const addActionNode = () => {\n    const newNodeId = `action-${nodeCount}`;\n\n    // Find the last node before the end node\n    let lastNodeBeforeEnd = 'start';\n    let lastNodeY = 50; // Default Y position of start node\n\n    // Find all edges that connect to the end node\n    const endEdges = edges.filter(edge => edge.target === 'end');\n    if (endEdges.length > 0) {\n      // Get the source node of the edge connecting to end\n      lastNodeBeforeEnd = endEdges[0].source;\n      const lastNode = nodes.find(node => node.id === lastNodeBeforeEnd);\n      if (lastNode) {\n        lastNodeY = lastNode.position.y;\n      }\n    }\n\n    // Calculate position for the new node\n    const newNodePosition = {\n      x: 300,\n      // Keep X position consistent\n      y: lastNodeY + 150 // Position below the last node\n    };\n\n    // Create the new node\n    const newNode = {\n      id: newNodeId,\n      type: 'action',\n      position: newNodePosition,\n      data: {\n        label: 'Action Node'\n      }\n    };\n\n    // Add the new node\n    setNodes(nds => [...nds, newNode]);\n\n    // Remove the edge connecting to end\n    setEdges(eds => {\n      // Filter out the edge connecting to end\n      const filteredEdges = eds.filter(edge => !(edge.source === lastNodeBeforeEnd && edge.target === 'end'));\n\n      // Add new edges\n      return [...filteredEdges, {\n        id: `${lastNodeBeforeEnd}-${newNodeId}`,\n        source: lastNodeBeforeEnd,\n        target: newNodeId,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      }, {\n        id: `${newNodeId}-end`,\n        source: newNodeId,\n        target: 'end',\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target'\n      }];\n    });\n    setNodeCount(nodeCount + 1);\n    setShowAddNodeMenu(false);\n  };\n\n  // Add a new if/else node directly from the Add Node button\n  const addIfElseNode = () => {\n    const newNodeId = `ifelse-${nodeCount}`;\n\n    // Find the last node before the end node\n    let lastNodeBeforeEnd = 'start';\n    let lastNodeY = 50; // Default Y position of start node\n\n    // Find all edges that connect to the end node\n    const endEdges = edges.filter(edge => edge.target === 'end');\n    if (endEdges.length > 0) {\n      // Get the source node of the edge connecting to end\n      lastNodeBeforeEnd = endEdges[0].source;\n      const lastNode = nodes.find(node => node.id === lastNodeBeforeEnd);\n      if (lastNode) {\n        lastNodeY = lastNode.position.y;\n      }\n    }\n\n    // Calculate position for the new node\n    const newNodePosition = {\n      x: 300,\n      // Keep X position consistent\n      y: lastNodeY + 150 // Position below the last node\n    };\n\n    // Create the new if/else node\n    const newNode = {\n      id: newNodeId,\n      type: 'ifelse',\n      position: newNodePosition,\n      data: {\n        label: 'If / Else',\n        branches: [{\n          id: 'branch-1',\n          name: 'Branch #1'\n        }]\n      }\n    };\n\n    // Create action nodes for each branch\n    const actionNodes = [{\n      id: `${newNodeId}-branch-1-action`,\n      type: 'action',\n      position: {\n        x: newNodePosition.x - 150,\n        y: newNodePosition.y + 100\n      },\n      data: {\n        label: 'Branch #1 Action'\n      }\n    }, {\n      id: `${newNodeId}-else-action`,\n      type: 'action',\n      position: {\n        x: newNodePosition.x,\n        y: newNodePosition.y + 100\n      },\n      data: {\n        label: 'Else Action'\n      }\n    }];\n\n    // Create an end node for the else branch\n    const elseEndNode = {\n      id: `${newNodeId}-else-end`,\n      type: 'end',\n      position: {\n        x: newNodePosition.x,\n        y: newNodePosition.y + 300\n      },\n      data: {\n        label: 'END'\n      }\n    };\n\n    // Create branch edges\n    const branchEdges = [\n    // Connect if/else directly to actions\n    {\n      id: `${newNodeId}-to-branch-1-action`,\n      source: newNodeId,\n      target: `${newNodeId}-branch-1-action`,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    }, {\n      id: `${newNodeId}-to-else-action`,\n      source: newNodeId,\n      target: `${newNodeId}-else-action`,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    },\n    // Connect branch #1 action to main end\n    {\n      id: `${newNodeId}-branch-1-action-to-end`,\n      source: `${newNodeId}-branch-1-action`,\n      target: 'end',\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    },\n    // Connect else action to its own end node\n    {\n      id: `${newNodeId}-else-action-to-end`,\n      source: `${newNodeId}-else-action`,\n      target: `${newNodeId}-else-end`,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    }];\n\n    // Connect the last node to the if/else node\n    const connectToIfElseEdge = {\n      id: `${lastNodeBeforeEnd}-${newNodeId}`,\n      source: lastNodeBeforeEnd,\n      target: newNodeId,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target'\n    };\n\n    // Add all nodes\n    setNodes(nds => [...nds, newNode, ...actionNodes, elseEndNode]);\n\n    // Update edges\n    setEdges(eds => {\n      // Filter out the edge connecting to end\n      const filteredEdges = eds.filter(edge => !(edge.source === lastNodeBeforeEnd && edge.target === 'end'));\n\n      // Add new edges\n      return [...filteredEdges, connectToIfElseEdge, ...branchEdges];\n    });\n    setNodeCount(nodeCount + 1);\n    setShowAddNodeMenu(false);\n  };\n\n  // Add a new branch to an if/else node\n  const addBranch = () => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    const newBranchId = `branch-${nodeFormData.branches.length + 1}`;\n    const newBranch = {\n      id: newBranchId,\n      name: `Branch #${nodeFormData.branches.length + 1}`\n    };\n    setNodeFormData({\n      ...nodeFormData,\n      branches: [...nodeFormData.branches, newBranch]\n    });\n    setBranchCount(branchCount + 1);\n  };\n\n  // Remove a branch from an if/else node\n  const removeBranch = branchId => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    setNodeFormData({\n      ...nodeFormData,\n      branches: nodeFormData.branches.filter(branch => branch.id !== branchId)\n    });\n  };\n\n  // Update branch name\n  const updateBranchName = (branchId, newName) => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    setNodeFormData({\n      ...nodeFormData,\n      branches: nodeFormData.branches.map(branch => branch.id === branchId ? {\n        ...branch,\n        name: newName\n      } : branch)\n    });\n  };\n\n  // Handle form submission for node editing\n  const handleNodeFormSubmit = e => {\n    e.preventDefault();\n    if (!selectedNode) return;\n\n    // Update node data\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNode.id) {\n        // For if/else nodes, update branch names too\n        if (node.type === 'ifelse') {\n          // Update branch label nodes\n          const updatedNode = {\n            ...node,\n            data: {\n              ...node.data,\n              label: nodeFormData.name,\n              branches: nodeFormData.branches\n            }\n          };\n          return updatedNode;\n        }\n\n        // For other node types\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            label: nodeFormData.name\n          }\n        };\n      } else if (selectedNode.type === 'ifelse' && node.id.includes('branch') && node.id.startsWith(selectedNode.id.split('-')[0])) {\n        // Update branch label nodes\n        const branchIndex = parseInt(node.id.split('-')[1]) - 1;\n        if (branchIndex >= 0 && branchIndex < nodeFormData.branches.length) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: nodeFormData.branches[branchIndex].name\n            }\n          };\n        }\n      }\n      return node;\n    }));\n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n\n  // Handle node deletion\n  const deleteNode = () => {\n    if (!selectedNode || selectedNode.id === 'start' || selectedNode.id === 'end') return;\n\n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(edge => edge.target === selectedNode.id);\n    const outgoingEdges = edges.filter(edge => edge.source === selectedNode.id);\n\n    // For if/else nodes, we need to handle differently\n    if (selectedNode.type === 'ifelse') {\n      // Find all related nodes (branch nodes, action nodes, end nodes)\n      const relatedNodes = nodes.filter(node => node.id.includes(selectedNode.id) || node.id.includes('branch') && node.id.includes(selectedNode.id.split('-')[1]) || node.id.includes(`${selectedNode.id}-else-end`));\n      const relatedNodeIds = relatedNodes.map(node => node.id);\n\n      // Find all edges connected to related nodes\n      const relatedEdges = edges.filter(edge => relatedNodeIds.includes(edge.source) || relatedNodeIds.includes(edge.target) || edge.source === selectedNode.id || edge.target === selectedNode.id);\n\n      // Remove the if/else node and all related nodes\n      setNodes(nds => nds.filter(node => node.id !== selectedNode.id && !relatedNodeIds.includes(node.id)));\n\n      // Remove all edges connected to this node and related nodes\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => !relatedEdges.some(re => re.id === edge.id));\n\n        // Connect the incoming node to the next node or end\n        if (incomingEdges.length > 0) {\n          // Connect the incoming node directly to the end node\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else {\n          // If no incoming edges (unlikely), ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => edge.source === 'start' && edge.target === 'end');\n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target'\n            });\n          }\n        }\n        return filteredEdges;\n      });\n    } else {\n      // For regular action nodes\n      // Remove just this node\n      setNodes(nds => nds.filter(node => node.id !== selectedNode.id));\n\n      // Remove edges connected to this node and reconnect\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => edge.source !== selectedNode.id && edge.target !== selectedNode.id);\n\n        // If there were both incoming and outgoing edges, connect them\n        if (incomingEdges.length > 0 && outgoingEdges.length > 0) {\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-${outgoingEdges[0].target}`,\n            source: incomingEdges[0].source,\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else if (incomingEdges.length > 0) {\n          // If only incoming edges, connect to end\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else if (outgoingEdges.length > 0) {\n          // If only outgoing edges, connect start to the target\n          filteredEdges.push({\n            id: `start-${outgoingEdges[0].target}`,\n            source: 'start',\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target'\n          });\n        } else {\n          // If no edges at all, ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => edge.source === 'start' && edge.target === 'end');\n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target'\n            });\n          }\n        }\n        return filteredEdges;\n      });\n    }\n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      onPaneClick: onPaneClick,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Panel, {\n        position: \"top-left\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: showAddNodeMenuHandler,\n            style: {\n              padding: '10px',\n              backgroundColor: '#1890ff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer'\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 7\n    }, this), showNodeMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: `${menuPosition.y}px`,\n        left: `${menuPosition.x}px`,\n        backgroundColor: 'white',\n        padding: '10px',\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n        zIndex: 1000,\n        transform: 'translate(-50%, -50%)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px',\n          fontWeight: 'bold'\n        },\n        children: \"Add Node:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNodeBetween('action'),\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#1890ff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Action Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNodeBetween('ifelse'),\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#ffc53d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"If / Else Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 9\n    }, this), showAddNodeMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: `${menuPosition.y}px`,\n        left: `${menuPosition.x}px`,\n        backgroundColor: 'white',\n        padding: '10px',\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n        zIndex: 1000,\n        transform: 'translate(-50%, -50%)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px',\n          fontWeight: 'bold'\n        },\n        children: \"Add Node:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addActionNode,\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#1890ff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Action Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addIfElseNode,\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#ffc53d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"If / Else Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 9\n    }, this), showNodeForm && selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n        zIndex: 1000,\n        transform: 'translate(-50%, -50%)',\n        minWidth: '300px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: 0\n        },\n        children: \"Edit Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNodeFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginBottom: '5px'\n            },\n            children: \"Node Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: nodeFormData.name,\n            onChange: e => setNodeFormData({\n              ...nodeFormData,\n              name: e.target.value\n            }),\n            style: {\n              width: '100%',\n              padding: '8px',\n              borderRadius: '4px',\n              border: '1px solid #d9d9d9'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1007,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1005,\n          columnNumber: 13\n        }, this), selectedNode.type === 'ifelse' && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginBottom: '5px'\n            },\n            children: \"Branches:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1022,\n            columnNumber: 17\n          }, this), nodeFormData.branches.map((branch, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: '5px',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: branch.name,\n              onChange: e => updateBranchName(branch.id, e.target.value),\n              style: {\n                flex: 1,\n                padding: '8px',\n                borderRadius: '4px',\n                border: '1px solid #d9d9d9',\n                marginRight: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1025,\n              columnNumber: 21\n            }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeBranch(branch.id),\n              style: {\n                padding: '8px',\n                backgroundColor: '#ff4d4f',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 23\n            }, this)]\n          }, branch.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1024,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: addBranch,\n            style: {\n              padding: '8px',\n              backgroundColor: '#52c41a',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              marginTop: '5px'\n            },\n            children: \"Add Branch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1055,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            style: {\n              padding: '10px',\n              backgroundColor: '#1890ff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: deleteNode,\n            style: {\n              padding: '10px',\n              backgroundColor: '#ff4d4f',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1087,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => {\n              setShowNodeForm(false);\n              setSelectedNode(null);\n            },\n            style: {\n              padding: '10px',\n              backgroundColor: '#d9d9d9',\n              color: 'black',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1004,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 858,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Xs/XlA1ZjChBWrSAgR+hu7A9Iw0=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","Panel","Handle","Position","jsxDEV","_jsxDEV","nodeTypes","start","data","id","style","padding","borderRadius","background","border","width","position","children","type","Bottom","height","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","marginBottom","justifyContent","marginRight","fontWeight","label","action","Top","role","ifelse","end","initialNodes","x","y","initialEdges","source","target","sourceHandle","targetHandle","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","selectedNode","setSelectedNode","showNodeMenu","setShowNodeMenu","menuPosition","setMenuPosition","clickedEdgeId","setClickedEdgeId","showNodeForm","setShowNodeForm","nodeFormData","setNodeFormData","name","branchCount","setBranchCount","showAddNodeMenu","setShowAddNodeMenu","reactFlowWrapper","onNodeClick","event","node","branches","onPaneClick","onEdgeClick","edge","sourceNode","targetNode","addNodeBetween","nodeType","find","e","newNodePosition","newNodeId","newNode","actionNodes","elseEndNode","branchEdges","nds","eds","filteredEdges","filter","showAddNodeMenuHandler","addActionNode","lastNodeBeforeEnd","lastNodeY","endEdges","length","lastNode","addIfElseNode","connectToIfElseEdge","addBranch","newBranchId","newBranch","removeBranch","branchId","branch","updateBranchName","newName","map","handleNodeFormSubmit","preventDefault","updatedNode","includes","startsWith","split","branchIndex","parseInt","deleteNode","incomingEdges","outgoingEdges","relatedNodes","relatedNodeIds","relatedEdges","some","re","push","hasStartToEndEdge","ref","fitView","variant","gap","size","onClick","backgroundColor","color","cursor","top","left","boxShadow","zIndex","transform","minWidth","marginTop","onSubmit","value","onChange","index","flex","_c","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  Panel,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Handle, Position } from 'reactflow';\n// Firstly, we import all the necessary libraries and components needed for the project to work\n\n\n\n// Custom node types\n//here we define and desine the nodes that will be used for the flow diagram\nconst nodeTypes = {\n  start: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#e6f7ff',\n      border: '1px solid #1890ff',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"source\"\n        style={{ background: '#1890ff', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        <div style={{ \n          width: '0px', \n          height: '0px', \n          borderRadius: '50%', \n          background: '#e6f7ff', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #1890ff'\n        }}>\n\n        </div>\n        <div style={{ fontWeight: 'bold' }}> 🚀 Start Node</div>\n      </div>\n      <div>{data.label || 'Start'}</div>\n    </div>\n  ),\n  action: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f0f5ff',\n      border: '1px solid #597ef7',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id=\"target\"\n        style={{ background: '#597ef7', width: '10px', height: '10px' }}\n      />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"source\"\n        style={{ background: '#597ef7', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        <div style={{ \n          width: '30px', \n          height: '30px', \n          borderRadius: '50%', \n          background: '#f0f5ff', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #597ef7'\n        }}>\n          <span role=\"img\" aria-label=\"action\">⚙️</span>\n        </div>\n        <div style={{ fontWeight: 'bold' }}>Action Node</div>\n      </div>\n      <div>{data.label || 'Action'}</div>\n    </div>\n  ),\n  ifelse: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#fff7e6',\n      border: '1px solid #ffc53d',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id=\"target\"\n        style={{ background: '#ffc53d', width: '10px', height: '10px' }}\n      />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"source\"\n        style={{ background: '#ffc53d', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        <div style={{ \n          width: '30px', \n          height: '30px', \n          borderRadius: '50%', \n          background: '#fff7e6', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #ffc53d'\n        }}>\n          <span role=\"img\" aria-label=\"if-else\">🔀</span>\n        </div>\n        <div style={{ fontWeight: 'bold' }}>If / Else</div>\n      </div>\n      <div>{data.label || 'If / Else'}</div>\n    </div>\n  ),\n  end: ({ data, id }) => (\n    <div style={{\n      padding: '15px',\n      borderRadius: '8px',\n      background: '#f9f0ff',\n      border: '1px solid #9254de',\n      width: '180px',\n      position: 'relative',\n    }}>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id=\"target\"\n        style={{ background: '#9254de', width: '10px', height: '10px' }}\n      />\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>\n        <div style={{ \n          width: '30px', \n          height: '30px', \n          borderRadius: '50%', \n          background: '#f9f0ff', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center',\n          marginRight: '10px',\n          border: '1px solid #9254de'\n        }}>\n          <span role=\"img\" aria-label=\"end\">🏁</span>\n        </div>\n        <div style={{ fontWeight: 'bold' }}>End Node</div>\n      </div>\n      <div>{data.label || 'END'}</div>\n    </div>\n  ),\n \n};\n\n\n//This is the initial edge that connects the start and end(LVL1)\nconst initialNodes = [\n  {\n    id: 'start',\n    type: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start' },\n  },\n  {\n    id: 'end',\n    type: 'end',\n    position: { x: 300, y: 400 },\n    data: { label: 'END' },\n  },\n];\n\nconst initialEdges = [\n  { \n    id: 'start->end', \n    source: 'start', \n    target: 'end', \n    type: 'smoothstep',\n    sourceHandle: 'source',\n    targetHandle: 'target'\n  },\n];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges); //2 default hooks\n  const [nodeCount, setNodeCount] = useState(1); // unique node IDs\n  const [selectedNode, setSelectedNode] = useState(null); //holds the ID of the selected node\n  const [showNodeMenu, setShowNodeMenu] = useState(false); //boolean  value to track if the node menue id shown or node\n  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 }); //to track the position of the node menu\n  const [clickedEdgeId, setClickedEdgeId] = useState(null); //track the id of the edge selected \n  const [showNodeForm, setShowNodeForm] = useState(false); //boolean to track if node form is show or node\n  const [nodeFormData, setNodeFormData] = useState({ name: '', type: '' }); //to track the data entered in the node(while editing form?)\n  const [branchCount, setBranchCount] = useState(1); //to track the number of the branches\n  const [showAddNodeMenu, setShowAddNodeMenu] = useState(false);//boolean to track if AddNodeMenu is shown\n  const reactFlowWrapper = useRef(null); //for dom\n\n  \n\n  // Handle node click\n  const onNodeClick = (event, node) => {\n    setSelectedNode(node);\n    setNodeFormData({ //to updates the nodeFormData of the node clicked\n      id: node.id,\n      name: node.data.label,\n      type: node.type,\n      branches: node.data.branches || []\n    });\n    setShowNodeForm(true); //to make the node form appear\n  };\n\n  // to handle background click to close forms\n  const onPaneClick = () => {\n    setSelectedNode(null);\n    setShowNodeForm(false);\n    setShowNodeMenu(false);\n    setShowAddNodeMenu(false);\n  };\n\n  // Handle edge click to show add node menu\n  const onEdgeClick = (event, edge) => {\n    setClickedEdgeId(edge.id);\n    \n    // calc position for the node menu\n \n  \n      const x = 100\n      const y = (sourceNode.position.y + targetNode.position.y) / 2;\n      \n      setMenuPosition({ x, y });\n      setShowNodeMenu(true);\n    \n  };\n\n  // Add a new node between two existing nodes\n  const addNodeBetween = (nodeType) => {\n    if (!clickedEdgeId) return;\n    \n    const edge = edges.find(e => e.id === clickedEdgeId);\n    if (!edge) return;\n    \n    const sourceNode = nodes.find(node => node.id === edge.source);\n    const targetNode = nodes.find(node => node.id === edge.target);\n    \n    if (!sourceNode || !targetNode) return;\n    \n    // Calculate position for the new node\n    const newNodePosition = {\n      x: (sourceNode.position.x + targetNode.position.x) / 2,\n      y: (sourceNode.position.y + targetNode.position.y) / 2,\n    };\n    \n    const newNodeId = `${nodeType}-${nodeCount}`;\n    \n    let newNode = {\n      id: newNodeId,\n      type: nodeType,\n      position: newNodePosition,\n      data: { label: nodeType === 'action' ? 'Action Node' : 'If / Else' },\n    };\n    \n    // If it's an if/else node, add default branches\n    if (nodeType === 'ifelse') {\n      newNode.data.branches = [\n        { id: 'branch-1', name: 'Branch #1' }\n      ];\n      \n      // Create action nodes for each branch\n      const actionNodes = [\n        {\n          id: `${newNodeId}-branch-1-action`,\n          type: 'action',\n          position: { \n            x: newNodePosition.x - 150, \n            y: newNodePosition.y + 100 \n          },\n          data: { label: 'Branch #1 Action' },\n        },\n        {\n          id: `${newNodeId}-else-action`,\n          type: 'action',\n          position: { \n            x: newNodePosition.x, \n            y: newNodePosition.y + 100 \n          },\n          data: { label: 'Else Action' },\n        }\n      ];\n      \n      // Create an end node for the else branch\n      const elseEndNode = {\n        id: `${newNodeId}-else-end`,\n        type: 'end',\n        position: { \n          x: newNodePosition.x, \n          y: newNodePosition.y + 300 \n        },\n        data: { label: 'END' },\n      };\n      \n      // Create branch edges\n      const branchEdges = [\n        // Connect if/else directly to actions\n        {\n          id: `${newNodeId}-to-branch-1-action`,\n          source: newNodeId,\n          target: `${newNodeId}-branch-1-action`,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        {\n          id: `${newNodeId}-to-else-action`,\n          source: newNodeId,\n          target: `${newNodeId}-else-action`,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        \n        // Connect branch #1 action to target\n        {\n          id: `${newNodeId}-branch-1-action-to-target`,\n          source: `${newNodeId}-branch-1-action`,\n          target: edge.target,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        \n        // Connect else action to its own end node\n        {\n          id: `${newNodeId}-else-action-to-end`,\n          source: `${newNodeId}-else-action`,\n          target: `${newNodeId}-else-end`,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        }\n      ];\n      \n      // Add all nodes and edges\n      setNodes(nds => [...nds, newNode, ...actionNodes, elseEndNode]);\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n        \n        // Add new edges\n        return [\n          ...filteredEdges,\n          {\n            id: `${edge.source}-${newNodeId}`,\n            source: edge.source,\n            target: newNodeId,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          },\n          ...branchEdges\n        ];\n      });\n    } else {\n      // For action nodes\n      setNodes(nds => [...nds, newNode]);\n      \n      // Update edges\n      setEdges(eds => {\n        // Remove the original edge\n        const filteredEdges = eds.filter(e => e.id !== clickedEdgeId);\n        \n        // Add new edges\n        return [\n          ...filteredEdges,\n          {\n            id: `${edge.source}-${newNodeId}`,\n            source: edge.source,\n            target: newNodeId,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          },\n          {\n            id: `${newNodeId}-${edge.target}`,\n            source: newNodeId,\n            target: edge.target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          }\n        ];\n      });\n    }\n    \n    setNodeCount(nodeCount + 1);\n    setShowNodeMenu(false);\n  };\n\n  // Show the Add Node menu\n  const showAddNodeMenuHandler = () => {\n    setMenuPosition({ x: 100, y: 100 }); // Position near the Add Node button\n    setShowAddNodeMenu(true);\n  };\n\n  // Add a new action node directly from the Add Node button\n  const addActionNode = () => {\n    const newNodeId = `action-${nodeCount}`;\n    \n    // Find the last node before the end node\n    let lastNodeBeforeEnd = 'start';\n    let lastNodeY = 50; // Default Y position of start node\n    \n    // Find all edges that connect to the end node\n    const endEdges = edges.filter(edge => edge.target === 'end');\n    \n    if (endEdges.length > 0) {\n      // Get the source node of the edge connecting to end\n      lastNodeBeforeEnd = endEdges[0].source;\n      const lastNode = nodes.find(node => node.id === lastNodeBeforeEnd);\n      if (lastNode) {\n        lastNodeY = lastNode.position.y;\n      }\n    }\n    \n    // Calculate position for the new node\n    const newNodePosition = {\n      x: 300, // Keep X position consistent\n      y: lastNodeY + 150, // Position below the last node\n    };\n    \n    // Create the new node\n    const newNode = {\n      id: newNodeId,\n      type: 'action',\n      position: newNodePosition,\n      data: { label: 'Action Node' },\n    };\n    \n    // Add the new node\n    setNodes(nds => [...nds, newNode]);\n    \n    // Remove the edge connecting to end\n    setEdges(eds => {\n      // Filter out the edge connecting to end\n      const filteredEdges = eds.filter(edge => !(edge.source === lastNodeBeforeEnd && edge.target === 'end'));\n      \n      // Add new edges\n      return [\n        ...filteredEdges,\n        {\n          id: `${lastNodeBeforeEnd}-${newNodeId}`,\n          source: lastNodeBeforeEnd,\n          target: newNodeId,\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        },\n        {\n          id: `${newNodeId}-end`,\n          source: newNodeId,\n          target: 'end',\n          type: 'smoothstep',\n          sourceHandle: 'source',\n          targetHandle: 'target',\n        }\n      ];\n    });\n    \n    setNodeCount(nodeCount + 1);\n    setShowAddNodeMenu(false);\n  };\n\n  // Add a new if/else node directly from the Add Node button\n  const addIfElseNode = () => {\n    const newNodeId = `ifelse-${nodeCount}`;\n    \n    // Find the last node before the end node\n    let lastNodeBeforeEnd = 'start';\n    let lastNodeY = 50; // Default Y position of start node\n    \n    // Find all edges that connect to the end node\n    const endEdges = edges.filter(edge => edge.target === 'end');\n    \n    if (endEdges.length > 0) {\n      // Get the source node of the edge connecting to end\n      lastNodeBeforeEnd = endEdges[0].source;\n      const lastNode = nodes.find(node => node.id === lastNodeBeforeEnd);\n      if (lastNode) {\n        lastNodeY = lastNode.position.y;\n      }\n    }\n    \n    // Calculate position for the new node\n    const newNodePosition = {\n      x: 300, // Keep X position consistent\n      y: lastNodeY + 150, // Position below the last node\n    };\n    \n    // Create the new if/else node\n    const newNode = {\n      id: newNodeId,\n      type: 'ifelse',\n      position: newNodePosition,\n      data: { \n        label: 'If / Else',\n        branches: [\n          { id: 'branch-1', name: 'Branch #1' }\n        ]\n      },\n    };\n    \n    // Create action nodes for each branch\n    const actionNodes = [\n      {\n        id: `${newNodeId}-branch-1-action`,\n        type: 'action',\n        position: { \n          x: newNodePosition.x - 150, \n          y: newNodePosition.y + 100 \n        },\n        data: { label: 'Branch #1 Action' },\n      },\n      {\n        id: `${newNodeId}-else-action`,\n        type: 'action',\n        position: { \n          x: newNodePosition.x, \n          y: newNodePosition.y + 100 \n        },\n        data: { label: 'Else Action' },\n      }\n    ];\n    \n    // Create an end node for the else branch\n    const elseEndNode = {\n      id: `${newNodeId}-else-end`,\n      type: 'end',\n      position: { \n        x: newNodePosition.x, \n        y: newNodePosition.y + 300 \n      },\n      data: { label: 'END' },\n    };\n    \n    // Create branch edges\n    const branchEdges = [\n      // Connect if/else directly to actions\n      {\n        id: `${newNodeId}-to-branch-1-action`,\n        source: newNodeId,\n        target: `${newNodeId}-branch-1-action`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target',\n      },\n      {\n        id: `${newNodeId}-to-else-action`,\n        source: newNodeId,\n        target: `${newNodeId}-else-action`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target',\n      },\n      \n      // Connect branch #1 action to main end\n      {\n        id: `${newNodeId}-branch-1-action-to-end`,\n        source: `${newNodeId}-branch-1-action`,\n        target: 'end',\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target',\n      },\n      \n      // Connect else action to its own end node\n      {\n        id: `${newNodeId}-else-action-to-end`,\n        source: `${newNodeId}-else-action`,\n        target: `${newNodeId}-else-end`,\n        type: 'smoothstep',\n        sourceHandle: 'source',\n        targetHandle: 'target',\n      }\n    ];\n    \n    // Connect the last node to the if/else node\n    const connectToIfElseEdge = {\n      id: `${lastNodeBeforeEnd}-${newNodeId}`,\n      source: lastNodeBeforeEnd,\n      target: newNodeId,\n      type: 'smoothstep',\n      sourceHandle: 'source',\n      targetHandle: 'target',\n    };\n    \n    // Add all nodes\n    setNodes(nds => [...nds, newNode, ...actionNodes, elseEndNode]);\n    \n    // Update edges\n    setEdges(eds => {\n      // Filter out the edge connecting to end\n      const filteredEdges = eds.filter(edge => !(edge.source === lastNodeBeforeEnd && edge.target === 'end'));\n      \n      // Add new edges\n      return [\n        ...filteredEdges,\n        connectToIfElseEdge,\n        ...branchEdges\n      ];\n    });\n    \n    setNodeCount(nodeCount + 1);\n    setShowAddNodeMenu(false);\n  };\n\n  // Add a new branch to an if/else node\n  const addBranch = () => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    \n    const newBranchId = `branch-${nodeFormData.branches.length + 1}`;\n    const newBranch = { id: newBranchId, name: `Branch #${nodeFormData.branches.length + 1}` };\n    \n    setNodeFormData({\n      ...nodeFormData,\n      branches: [...nodeFormData.branches, newBranch]\n    });\n    \n    setBranchCount(branchCount + 1);\n  };\n\n  // Remove a branch from an if/else node\n  const removeBranch = (branchId) => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    \n    setNodeFormData({\n      ...nodeFormData,\n      branches: nodeFormData.branches.filter(branch => branch.id !== branchId)\n    });\n  };\n\n  // Update branch name\n  const updateBranchName = (branchId, newName) => {\n    if (!selectedNode || selectedNode.type !== 'ifelse') return;\n    \n    setNodeFormData({\n      ...nodeFormData,\n      branches: nodeFormData.branches.map(branch => \n        branch.id === branchId ? { ...branch, name: newName } : branch\n      )\n    });\n  };\n\n  // Handle form submission for node editing\n  const handleNodeFormSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!selectedNode) return;\n    \n    // Update node data\n    setNodes(nds => \n      nds.map(node => {\n        if (node.id === selectedNode.id) {\n          // For if/else nodes, update branch names too\n          if (node.type === 'ifelse') {\n            // Update branch label nodes\n            const updatedNode = {\n              ...node,\n              data: {\n                ...node.data,\n                label: nodeFormData.name,\n                branches: nodeFormData.branches\n              }\n            };\n            return updatedNode;\n          }\n          \n          // For other node types\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: nodeFormData.name\n            }\n          };\n        } else if (selectedNode.type === 'ifelse' && node.id.includes('branch') && node.id.startsWith(selectedNode.id.split('-')[0])) {\n          // Update branch label nodes\n          const branchIndex = parseInt(node.id.split('-')[1]) - 1;\n          if (branchIndex >= 0 && branchIndex < nodeFormData.branches.length) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                label: nodeFormData.branches[branchIndex].name\n              }\n            };\n          }\n        }\n        return node;\n      })\n    );\n    \n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n\n  // Handle node deletion\n  const deleteNode = () => {\n    if (!selectedNode || selectedNode.id === 'start' || selectedNode.id === 'end') return;\n    \n    // Find incoming and outgoing edges\n    const incomingEdges = edges.filter(edge => edge.target === selectedNode.id);\n    const outgoingEdges = edges.filter(edge => edge.source === selectedNode.id);\n    \n    // For if/else nodes, we need to handle differently\n    if (selectedNode.type === 'ifelse') {\n      // Find all related nodes (branch nodes, action nodes, end nodes)\n      const relatedNodes = nodes.filter(node => \n        node.id.includes(selectedNode.id) || \n        (node.id.includes('branch') && node.id.includes(selectedNode.id.split('-')[1])) ||\n        node.id.includes(`${selectedNode.id}-else-end`)\n      );\n      \n      const relatedNodeIds = relatedNodes.map(node => node.id);\n      \n      // Find all edges connected to related nodes\n      const relatedEdges = edges.filter(edge => \n        relatedNodeIds.includes(edge.source) || \n        relatedNodeIds.includes(edge.target) ||\n        edge.source === selectedNode.id ||\n        edge.target === selectedNode.id\n      );\n      \n      // Remove the if/else node and all related nodes\n      setNodes(nds => nds.filter(node => \n        node.id !== selectedNode.id && \n        !relatedNodeIds.includes(node.id)\n      ));\n      \n      // Remove all edges connected to this node and related nodes\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => \n          !relatedEdges.some(re => re.id === edge.id)\n        );\n        \n        // Connect the incoming node to the next node or end\n        if (incomingEdges.length > 0) {\n          // Connect the incoming node directly to the end node\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else {\n          // If no incoming edges (unlikely), ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => \n            edge.source === 'start' && edge.target === 'end'\n          );\n          \n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target',\n            });\n          }\n        }\n        \n        return filteredEdges;\n      });\n    } else {\n      // For regular action nodes\n      // Remove just this node\n      setNodes(nds => nds.filter(node => node.id !== selectedNode.id));\n      \n      // Remove edges connected to this node and reconnect\n      setEdges(eds => {\n        const filteredEdges = eds.filter(edge => \n          edge.source !== selectedNode.id && \n          edge.target !== selectedNode.id\n        );\n        \n        // If there were both incoming and outgoing edges, connect them\n        if (incomingEdges.length > 0 && outgoingEdges.length > 0) {\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-${outgoingEdges[0].target}`,\n            source: incomingEdges[0].source,\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else if (incomingEdges.length > 0) {\n          // If only incoming edges, connect to end\n          filteredEdges.push({\n            id: `${incomingEdges[0].source}-end`,\n            source: incomingEdges[0].source,\n            target: 'end',\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else if (outgoingEdges.length > 0) {\n          // If only outgoing edges, connect start to the target\n          filteredEdges.push({\n            id: `start-${outgoingEdges[0].target}`,\n            source: 'start',\n            target: outgoingEdges[0].target,\n            type: 'smoothstep',\n            sourceHandle: 'source',\n            targetHandle: 'target',\n          });\n        } else {\n          // If no edges at all, ensure start is connected to end\n          const hasStartToEndEdge = filteredEdges.some(edge => \n            edge.source === 'start' && edge.target === 'end'\n          );\n          \n          if (!hasStartToEndEdge) {\n            filteredEdges.push({\n              id: 'start-end',\n              source: 'start',\n              target: 'end',\n              type: 'smoothstep',\n              sourceHandle: 'source',\n              targetHandle: 'target',\n            });\n          }\n        }\n        \n        return filteredEdges;\n      });\n    }\n    \n    setShowNodeForm(false);\n    setSelectedNode(null);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }} ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        onPaneClick={onPaneClick}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n        \n        <Panel position=\"top-left\">\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <button\n              onClick={showAddNodeMenuHandler}\n              style={{\n                padding: '10px',\n                backgroundColor: '#1890ff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '5px',\n                cursor: 'pointer',\n              }}\n            >\n              Add Node\n            </button>\n          </div>\n        </Panel>\n      </ReactFlow>\n\n      {/* Node Selection Menu */}\n      {showNodeMenu && (\n        <div\n          style={{\n            position: 'absolute',\n            top: `${menuPosition.y}px`,\n            left: `${menuPosition.x}px`,\n            backgroundColor: 'white',\n            padding: '10px',\n            borderRadius: '5px',\n            boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n            zIndex: 1000,\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>Add Node:</div>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <button\n              onClick={() => addNodeBetween('action')}\n              style={{\n                padding: '8px 12px',\n                backgroundColor: '#1890ff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Action Node\n            </button>\n            <button\n              onClick={() => addNodeBetween('ifelse')}\n              style={{\n                padding: '8px 12px',\n                backgroundColor: '#ffc53d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              If / Else Node\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Add Node Menu */}\n      {showAddNodeMenu && (\n        <div\n          style={{\n            position: 'absolute',\n            top: `${menuPosition.y}px`,\n            left: `${menuPosition.x}px`,\n            backgroundColor: 'white',\n            padding: '10px',\n            borderRadius: '5px',\n            boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n            zIndex: 1000,\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>Add Node:</div>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <button\n              onClick={addActionNode}\n              style={{\n                padding: '8px 12px',\n                backgroundColor: '#1890ff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Action Node\n            </button>\n            <button\n              onClick={addIfElseNode}\n              style={{\n                padding: '8px 12px',\n                backgroundColor: '#ffc53d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              If / Else Node\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Node Form */}\n      {showNodeForm && selectedNode && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            backgroundColor: 'white',\n            padding: '20px',\n            borderRadius: '5px',\n            boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n            zIndex: 1000,\n            transform: 'translate(-50%, -50%)',\n            minWidth: '300px',\n          }}\n        >\n          <h3 style={{ marginTop: 0 }}>Edit Node</h3>\n          <form onSubmit={handleNodeFormSubmit}>\n            <div style={{ marginBottom: '15px' }}>\n              <label style={{ display: 'block', marginBottom: '5px' }}>Node Name:</label>\n              <input\n                type=\"text\"\n                value={nodeFormData.name}\n                onChange={(e) => setNodeFormData({ ...nodeFormData, name: e.target.value })}\n                style={{\n                  width: '100%',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  border: '1px solid #d9d9d9',\n                }}\n              />\n            </div>\n            \n            {selectedNode.type === 'ifelse' && (\n              <div style={{ marginBottom: '15px' }}>\n                <label style={{ display: 'block', marginBottom: '5px' }}>Branches:</label>\n                {nodeFormData.branches.map((branch, index) => (\n                  <div key={branch.id} style={{ display: 'flex', marginBottom: '5px', alignItems: 'center' }}>\n                    <input\n                      type=\"text\"\n                      value={branch.name}\n                      onChange={(e) => updateBranchName(branch.id, e.target.value)}\n                      style={{\n                        flex: 1,\n                        padding: '8px',\n                        borderRadius: '4px',\n                        border: '1px solid #d9d9d9',\n                        marginRight: '5px',\n                      }}\n                    />\n                    {index > 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => removeBranch(branch.id)}\n                        style={{\n                          padding: '8px',\n                          backgroundColor: '#ff4d4f',\n                          color: 'white',\n                          border: 'none',\n                          borderRadius: '4px',\n                          cursor: 'pointer',\n                        }}\n                      >\n                        Remove\n                      </button>\n                    )}\n                  </div>\n                ))}\n                <button\n                  type=\"button\"\n                  onClick={addBranch}\n                  style={{\n                    padding: '8px',\n                    backgroundColor: '#52c41a',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    marginTop: '5px',\n                  }}\n                >\n                  Add Branch\n                </button>\n              </div>\n            )}\n            \n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <button\n                type=\"submit\"\n                style={{\n                  padding: '10px',\n                  backgroundColor: '#1890ff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                }}\n              >\n                Save\n              </button>\n              <button\n                type=\"button\"\n                onClick={deleteNode}\n                style={{\n                  padding: '10px',\n                  backgroundColor: '#ff4d4f',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                }}\n              >\n                Delete Node\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setShowNodeForm(false);\n                  setSelectedNode(null);\n                }}\n                style={{\n                  padding: '10px',\n                  backgroundColor: '#d9d9d9',\n                  color: 'black',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                }}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}