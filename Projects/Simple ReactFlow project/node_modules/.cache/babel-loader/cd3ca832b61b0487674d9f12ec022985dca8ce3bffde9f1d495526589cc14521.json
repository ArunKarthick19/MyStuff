{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunk\\\\Documents\\\\Arun works\\\\tt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  position: {\n    x: 300,\n    y: 50\n  },\n  data: {\n    label: 'Start Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}, {\n  id: 'end',\n  position: {\n    x: 300,\n    y: 1000\n  },\n  data: {\n    label: 'End Node'\n  },\n  style: {\n    background: '#ffffff',\n    padding: 10,\n    borderRadius: 10,\n    color: 'black',\n    border: '1px solid #000000'\n  }\n}];\nconst initialEdges = [{\n  id: 'start->end',\n  source: 'start',\n  target: 'end',\n  type: 'smoothstep'\n}];\nconst PlusButtonNode = ({\n  id,\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#007bff',\n      color: 'white',\n      padding: '10px 15px',\n      borderRadius: '50%',\n      textAlign: 'center',\n      cursor: 'pointer',\n      fontSize: '20px',\n      userSelect: 'none'\n    },\n    onClick: () => data.onClick(id) // Call onClick function passed through props\n    ,\n    children: \"+\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_c = PlusButtonNode;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(1); // For unique node IDs\n  const [plusButtonNodes, setPlusButtonNodes] = useState([]);\n\n  // Register custom node types\n  const nodeTypes = {\n    plus: PlusButtonNode // Register custom PlusButtonNode\n  };\n\n  // Handler to add a new node\n  const addNodeHandler = prevNodeId => {\n    const newNodeId = `node-${nodeCount}`;\n    const newNodePosition = {\n      x: 300,\n      y: 100 + nodeCount * 100\n    };\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: {\n        label: `Node ${nodeCount}`\n      },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000'\n      }\n    };\n\n    // Log new node position\n    console.log(`New Node Created: ${newNodeId}`);\n    console.log(`Position: x = ${newNodePosition.x}, y = ${newNodePosition.y}`);\n\n    // Add the new node\n    setNodes(nds => [...nds, newNode]);\n\n    // Create new edges\n    const newEdges = [\n    // Connect the previous node to the new node\n    {\n      id: `e-${prevNodeId}-${newNodeId}`,\n      source: prevNodeId,\n      target: newNodeId,\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#1890ff',\n        strokeWidth: 2\n      }\n    },\n    // Connect the new node to the end node\n    {\n      id: `e-${newNodeId}-end`,\n      source: newNodeId,\n      target: 'end',\n      type: 'smoothstep',\n      animated: true,\n      style: {\n        stroke: '#1890ff',\n        strokeWidth: 2\n      }\n    }];\n\n    // Update the edges state\n    setEdges(eds => [...eds, ...newEdges]);\n\n    // Add the \"+\" button node between new node and previous node\n    const prevNode = nodes.find(node => node.id === prevNodeId);\n    const newPlusButtonNode = {\n      id: `plus-${newNodeId}`,\n      position: {\n        x: (prevNode.position.x + newNodePosition.x) / 2,\n        y: (prevNode.position.y + newNodePosition.y) / 2\n      },\n      data: {\n        onClick: addNodeHandler\n      },\n      // Pass the addNodeHandler to the plus button node\n      type: 'plus' // Use the custom plus button node type\n    };\n    setPlusButtonNodes(btns => [...btns, newPlusButtonNode]);\n\n    // Increment node count\n    setNodeCount(nodeCount + 1);\n  };\n\n  // Function to handle \"+\" button click to add a new node\n  const handlePlusClick = prevNodeId => {\n    addNodeHandler(prevNodeId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: [...nodes, ...plusButtonNodes] // Add plus button nodes here\n      ,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes // Register custom node types\n      ,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addNodeHandler('start') // Initial node to be connected to \"start\"\n      ,\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '20px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"10LTck+6sx3e5XADmvlI70n0qrA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlusButtonNode\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","position","x","y","data","label","style","background","padding","borderRadius","color","border","initialEdges","source","target","type","PlusButtonNode","textAlign","cursor","fontSize","userSelect","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeCount","setNodeCount","plusButtonNodes","setPlusButtonNodes","nodeTypes","plus","addNodeHandler","prevNodeId","newNodeId","newNodePosition","newNode","console","log","nds","newEdges","animated","stroke","strokeWidth","eds","prevNode","find","node","newPlusButtonNode","btns","handlePlusClick","width","height","fitView","variant","gap","size","top","left","backgroundColor","_c2","$RefreshReg$"],"sources":["C:/Users/arunk/Documents/Arun works/tt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nconst initialNodes = [\n  {\n    id: 'start',\n    position: { x: 300, y: 50 },\n    data: { label: 'Start Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n  {\n    id: 'end',\n    position: { x: 300, y: 1000 },\n    data: { label: 'End Node' },\n    style: {\n      background: '#ffffff',\n      padding: 10,\n      borderRadius: 10,\n      color: 'black',\n      border: '1px solid #000000',\n    },\n  },\n];\n\nconst initialEdges = [\n  { id: 'start->end', source: 'start', target: 'end', type: 'smoothstep' },\n];\n\nconst PlusButtonNode = ({ id, data }) => {\n  return (\n    <div\n      style={{\n        background: '#007bff',\n        color: 'white',\n        padding: '10px 15px',\n        borderRadius: '50%',\n        textAlign: 'center',\n        cursor: 'pointer',\n        fontSize: '20px',\n        userSelect: 'none',\n      }}\n      onClick={() => data.onClick(id)} // Call onClick function passed through props\n    >\n      +\n    </div>\n  );\n};\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nodeCount, setNodeCount] = useState(1); // For unique node IDs\n  const [plusButtonNodes, setPlusButtonNodes] = useState([]);\n\n  // Register custom node types\n  const nodeTypes = {\n    plus: PlusButtonNode, // Register custom PlusButtonNode\n  };\n\n  // Handler to add a new node\n  const addNodeHandler = (prevNodeId) => {\n    const newNodeId = `node-${nodeCount}`;\n    const newNodePosition = { x: 300, y: 100 + nodeCount * 100 };\n\n    const newNode = {\n      id: newNodeId,\n      position: newNodePosition,\n      data: { label: `Node ${nodeCount}` },\n      style: {\n        background: '#a0d911',\n        padding: 10,\n        borderRadius: 10,\n        color: 'black',\n        border: '1px solid #000000',\n      },\n    };\n\n    // Log new node position\n    console.log(`New Node Created: ${newNodeId}`);\n    console.log(`Position: x = ${newNodePosition.x}, y = ${newNodePosition.y}`);\n\n    // Add the new node\n    setNodes((nds) => [...nds, newNode]);\n\n    // Create new edges\n    const newEdges = [\n      // Connect the previous node to the new node\n      {\n        id: `e-${prevNodeId}-${newNodeId}`,\n        source: prevNodeId,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      },\n      // Connect the new node to the end node\n      {\n        id: `e-${newNodeId}-end`,\n        source: newNodeId,\n        target: 'end',\n        type: 'smoothstep',\n        animated: true,\n        style: { stroke: '#1890ff', strokeWidth: 2 },\n      },\n    ];\n\n    // Update the edges state\n    setEdges((eds) => [...eds, ...newEdges]);\n\n    // Add the \"+\" button node between new node and previous node\n    const prevNode = nodes.find((node) => node.id === prevNodeId);\n    const newPlusButtonNode = {\n      id: `plus-${newNodeId}`,\n      position: {\n        x: (prevNode.position.x + newNodePosition.x) / 2,\n        y: (prevNode.position.y + newNodePosition.y) / 2,\n      },\n      data: { onClick: addNodeHandler }, // Pass the addNodeHandler to the plus button node\n      type: 'plus', // Use the custom plus button node type\n    };\n\n    setPlusButtonNodes((btns) => [...btns, newPlusButtonNode]);\n\n    // Increment node count\n    setNodeCount(nodeCount + 1);\n  };\n\n  // Function to handle \"+\" button click to add a new node\n  const handlePlusClick = (prevNodeId) => {\n    addNodeHandler(prevNodeId);\n  };\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={[...nodes, ...plusButtonNodes]} // Add plus button nodes here\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes} // Register custom node types\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n\n      {/* Add Node Button */}\n      <button\n        onClick={() => addNodeHandler('start')} // Initial node to be connected to \"start\"\n        style={{\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          padding: '10px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n        }}\n      >\n        Add Node\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}